     1                                  ; BIOS source for 8086tiny IBM PC emulator (revision 1.21 and above). Compiles with NASM.
     2                                  ; Copyright 2013-14, Adrian Cable (adrian.cable@gmail.com) - http://www.megalith.co.uk/8086tiny
     3                                  ;
     4                                  ; Revision 1.61
     5                                  ;
     6                                  ; This work is licensed under the MIT License. See included LICENSE.TXT.
     7                                  
     8                                  	cpu	8086
     9                                  
    10                                  ; Here we define macros for some custom instructions that help the emulator talk with the outside
    11                                  ; world. They are described in detail in the hint.html file, which forms part of the emulator
    12                                  ; distribution.
    13                                  
    14                                  %macro	extended_putchar_al 0
    15                                  	db	0x0f, 0x00
    16                                  %endmacro
    17                                  
    18                                  %macro	extended_get_rtc 0
    19                                  	db	0x0f, 0x01
    20                                  %endmacro
    21                                  
    22                                  %macro	extended_read_disk 0
    23                                  	db	0x0f, 0x02
    24                                  %endmacro
    25                                  
    26                                  %macro	extended_write_disk 0
    27                                  	db	0x0f, 0x03
    28                                  %endmacro
    29                                  
    30                                  org	100h				; BIOS loads at offset 0x0100
    31                                  
    32                                  main:
    33                                  
    34 00000000 EB56                    	jmp	bios_entry
    35                                  
    36                                  ; Here go pointers to the different data tables used for instruction decoding
    37                                  
    38 00000002 [B016]                  	dw	rm_mode12_reg1	; Table 0: R/M mode 1/2 "register 1" lookup
    39 00000004 [9816]                  	dw	rm_mode012_reg2	; Table 1: R/M mode 1/2 "register 2" lookup
    40 00000006 [B816]                  	dw	rm_mode12_disp	; Table 2: R/M mode 1/2 "DISP multiplier" lookup
    41 00000008 [C016]                  	dw	rm_mode12_dfseg	; Table 3: R/M mode 1/2 "default segment" lookup
    42 0000000A [9016]                  	dw	rm_mode0_reg1	; Table 4: R/M mode 0 "register 1" lookup
    43 0000000C [9816]                  	dw	rm_mode012_reg2 ; Table 5: R/M mode 0 "register 2" lookup
    44 0000000E [A016]                  	dw	rm_mode0_disp	; Table 6: R/M mode 0 "DISP multiplier" lookup
    45 00000010 [A816]                  	dw	rm_mode0_dfseg	; Table 7: R/M mode 0 "default segment" lookup
    46 00000012 [C816]                  	dw	xlat_ids	; Table 8: Translation of raw opcode index ("Raw ID") to function number ("Xlat'd ID")
    47 00000014 [C817]                  	dw	ex_data		; Table 9: Translation of Raw ID to Extra Data
    48 00000016 [C818]                  	dw	std_flags	; Table 10: How each Raw ID sets the flags (bit 1 = sets SZP, bit 2 = sets AF/OF for arithmetic, bit 3 = sets OF/CF for logic)
    49 00000018 [F11C]                  	dw	parity		; Table 11: Parity flag loop-up table (256 entries)
    50 0000001A [C819]                  	dw	base_size	; Table 12: Translation of Raw ID to base instruction size (bytes)
    51 0000001C [C81A]                  	dw	i_w_adder	; Table 13: Translation of Raw ID to i_w size adder yes/no
    52 0000001E [C81B]                  	dw	i_mod_adder	; Table 14: Translation of Raw ID to i_mod size adder yes/no
    53 00000020 [D11C]                  	dw	jxx_dec_a	; Table 15: Jxx decode table A
    54 00000022 [D91C]                  	dw	jxx_dec_b	; Table 16: Jxx decode table B
    55 00000024 [E11C]                  	dw	jxx_dec_c	; Table 17: Jxx decode table C
    56 00000026 [E91C]                  	dw	jxx_dec_d	; Table 18: Jxx decode table D
    57 00000028 [C81C]                  	dw	flags_mult	; Table 19: FLAGS multipliers
    58                                  
    59                                  ; These values (BIOS ID string, BIOS date and so forth) go at the very top of memory
    60                                  
    61 0000002A 3830383674696E7920-     biosstr	db	'8086tiny BIOS Revision 1.61!', 0, 0		; Why not?
    61 00000033 42494F532052657669-
    61 0000003C 73696F6E20312E3631-
    61 00000045 210000             
    62 00000048 EA000100F030332F30-     mem_top	db	0xea, 0, 0x01, 0, 0xf0, '03/08/14', 0, 0xfe, 0
    62 00000051 382F313400FE00     
    63                                  
    64                                  bios_entry:
    65                                  
    66                                  	; Set up initial stack to F000:F000
    67                                  
    68 00000058 BC00F0                  	mov	sp, 0xf000
    69 0000005B 8ED4                    	mov	ss, sp
    70                                  
    71 0000005D 0E                      	push	cs
    72 0000005E 07                      	pop	es
    73                                  
    74 0000005F 50                      	push	ax
    75                                  
    76                                  	; The emulator requires a few control registers in memory to always be zero for correct
    77                                  	; instruction decoding (in particular, register look-up operations). These are the
    78                                  	; emulator's zero segment (ZS) and always-zero flag (XF). Because the emulated memory
    79                                  	; space is uninitialised, we need to be sure these values are zero before doing anything
    80                                  	; else. The instructions we need to use to set them must not rely on look-up operations.
    81                                  	; So e.g. MOV to memory is out but string operations are fine.
    82                                  
    83 00000060 FC                      	cld
    84                                  
    85 00000061 31C0                    	xor	ax, ax
    86 00000063 BF1800                  	mov	di, 24
    87 00000066 AB                      	stosw			; Set ZS = 0
    88 00000067 BF3100                  	mov	di, 49
    89 0000006A AA                      	stosb			; Set XF = 0
    90                                  
    91                                  	; Now we can do whatever we want! DL starts off being the boot disk.
    92                                  
    93 0000006B 2E8816[7614]            	mov	[cs:boot_device], dl
    94                                  
    95                                  	; Set up Hercules graphics support. We start with the adapter in text mode
    96                                  
    97 00000070 52                      	push	dx
    98                                  
    99 00000071 BAB803                  	mov	dx, 0x3b8
   100 00000074 B000                    	mov	al, 0
   101 00000076 EE                      	out	dx, al		; Set Hercules support to text mode
   102                                  
   103 00000077 BAB403                  	mov	dx, 0x3b4
   104 0000007A B001                    	mov	al, 1		; Hercules CRTC "horizontal displayed" register select
   105 0000007C EE                      	out	dx, al
   106 0000007D BAB503                  	mov	dx, 0x3b5
   107 00000080 B02D                    	mov	al, 0x2d	; 0x2D = 45 (* 16) = 720 pixels wide (GRAPHICS_X)
   108 00000082 EE                      	out	dx, al
   109 00000083 BAB403                  	mov	dx, 0x3b4
   110 00000086 B006                    	mov	al, 6		; Hercules CRTC "vertical displayed" register select
   111 00000088 EE                      	out	dx, al
   112 00000089 BAB503                  	mov	dx, 0x3b5
   113 0000008C B057                    	mov	al, 0x57	; 0x57 = 87 (* 4) = 348 pixels high (GRAPHICS_Y)
   114 0000008E EE                      	out	dx, al
   115                                  
   116 0000008F 5A                      	pop	dx
   117                                  
   118 00000090 58                      	pop	ax
   119                                  
   120                                  	; Check cold boot/warm boot. We initialise disk parameters on cold boot only
   121                                  
   122 00000091 2E803E[740F]00          	cmp	byte [cs:boot_state], 0	; Cold boot?
   123 00000097 7403E9A700              	jne	boot
   124                                  
   125 0000009C 2EC606[740F]01          	mov	byte [cs:boot_state], 1	; Set flag so next boot will be warm boot
   126                                  
   127                                  	; First, set up the disk subsystem. Only do this on the very first startup, when
   128                                  	; the emulator sets up the CX/AX registers with disk information.
   129                                  
   130                                  	; Compute the cylinder/head/sector count for the HD disk image, if present.
   131                                  	; Total number of sectors is in CX:AX, or 0 if there is no HD image. First,
   132                                  	; we put it in DX:CX.
   133                                  
   134 000000A2 89CA                    	mov	dx, cx
   135 000000A4 89C1                    	mov	cx, ax
   136                                  
   137 000000A6 2E8916[620F]            	mov	[cs:hd_secs_hi], dx
   138 000000AB 2E890E[640F]            	mov	[cs:hd_secs_lo], cx
   139                                  
   140 000000B0 83F900                  	cmp	cx, 0
   141 000000B3 7409                    	je	maybe_no_hd
   142                                  
   143 000000B5 2EC706[600F]0200        	mov	word [cs:num_disks], 2
   144 000000BC EB15                    	jmp	calc_hd
   145                                  
   146                                  maybe_no_hd:
   147                                  
   148 000000BE 83FA00                  	cmp	dx, 0
   149 000000C1 7409                    	je	no_hd
   150                                  
   151 000000C3 2EC706[600F]0200        	mov	word [cs:num_disks], 2
   152 000000CA EB07                    	jmp	calc_hd
   153                                  
   154                                  no_hd:
   155                                  
   156 000000CC 2EC706[600F]0100        	mov	word [cs:num_disks], 1
   157                                  
   158                                  calc_hd:
   159                                  
   160 000000D3 89C8                    	mov	ax, cx
   161 000000D5 2EC706[680F]0100        	mov	word [cs:hd_max_track], 1
   162 000000DC 2EC706[6A0F]0100        	mov	word [cs:hd_max_head], 1
   163                                  
   164 000000E3 83FA00                  	cmp	dx, 0		; More than 63 total sectors? If so, we have more than 1 track.
   165 000000E6 770B                    	ja	sect_overflow
   166 000000E8 83F83F                  	cmp	ax, 63
   167 000000EB 7706                    	ja	sect_overflow
   168                                  
   169 000000ED 2EA3[660F]              	mov	[cs:hd_max_sector], ax
   170 000000F1 EB10                    	jmp	calc_heads
   171                                  
   172                                  sect_overflow:
   173                                  
   174 000000F3 B93F00                  	mov	cx, 63		; Calculate number of tracks
   175 000000F6 F7F1                    	div	cx
   176 000000F8 2EA3[680F]              	mov	[cs:hd_max_track], ax
   177 000000FC 2EC706[660F]3F00        	mov	word [cs:hd_max_sector], 63
   178                                  
   179                                  calc_heads:
   180                                  
   181 00000103 BA0000                  	mov	dx, 0		; More than 1024 tracks? If so, we have more than 1 head.
   182 00000106 2EA1[680F]              	mov	ax, [cs:hd_max_track]
   183 0000010A 3D0004                  	cmp	ax, 1024
   184 0000010D 7702                    	ja	track_overflow
   185                                  	
   186 0000010F EB10                    	jmp	calc_end
   187                                  
   188                                  track_overflow:
   189                                  
   190 00000111 B90004                  	mov	cx, 1024
   191 00000114 F7F1                    	div	cx
   192 00000116 2EA3[6A0F]              	mov	[cs:hd_max_head], ax
   193 0000011A 2EC706[680F]0004        	mov	word [cs:hd_max_track], 1024
   194                                  
   195                                  calc_end:
   196                                  
   197                                  	; Convert number of tracks into maximum track (0-based) and then store in INT 41
   198                                  	; HD parameter table
   199                                  
   200 00000121 2EA1[6A0F]              	mov	ax, [cs:hd_max_head]
   201 00000125 2EA2[420F]              	mov	[cs:int41_max_heads], al
   202 00000129 2EA1[680F]              	mov	ax, [cs:hd_max_track]
   203 0000012D 2EA3[400F]              	mov	[cs:int41_max_cyls], ax
   204 00000131 2EA1[660F]              	mov	ax, [cs:hd_max_sector]
   205 00000135 2EA2[4E0F]              	mov	[cs:int41_max_sect], al
   206                                  
   207 00000139 2EFF0E[680F]            	dec	word [cs:hd_max_track]
   208 0000013E 2EFF0E[6A0F]            	dec	word [cs:hd_max_head]
   209                                  	
   210                                  ; Main BIOS entry point. Zero the flags, and set up registers.
   211                                  
   212 00000143 B80000                  boot:	mov	ax, 0
   213 00000146 50                      	push	ax
   214 00000147 9D                      	popf
   215                                  
   216 00000148 0E                      	push	cs
   217 00000149 0E                      	push	cs
   218 0000014A 1F                      	pop	ds
   219 0000014B 17                      	pop	ss
   220 0000014C BC00F0                  	mov	sp, 0xf000
   221                                  	
   222                                  ; Set up the IVT. First we zero out the table
   223                                  
   224 0000014F FC                      	cld
   225                                  
   226 00000150 31C0                    	xor	ax, ax
   227 00000152 8EC0                    	mov	es, ax
   228 00000154 31FF                    	xor	di, di
   229 00000156 B90002                  	mov	cx, 512
   230 00000159 F3AB                    	rep	stosw
   231                                  
   232                                  ; Then we load in the pointers to our interrupt handlers
   233                                  
   234 0000015B BF0000                  	mov	di, 0
   235 0000015E BE[D915]                	mov	si, int_table
   236 00000161 8B0E[5316]              	mov	cx, [itbl_size]
   237 00000165 F3A4                    	rep	movsb
   238                                  
   239                                  ; Set pointer to INT 41 table for hard disk
   240                                  
   241 00000167 B9[400F]                	mov	cx, int41
   242 0000016A 26890E0401              	mov	word [es:4*0x41], cx
   243 0000016F B900F0                  	mov	cx, 0xf000
   244 00000172 26890E0601              	mov	word [es:4*0x41 + 2], cx
   245                                  
   246                                  ; Set up last 16 bytes of memory, including boot jump, BIOS date, machine ID byte
   247                                  
   248 00000177 B8FFFF                  	mov	ax, 0xffff
   249 0000017A 8EC0                    	mov	es, ax
   250 0000017C BF0000                  	mov	di, 0
   251 0000017F BE[4800]                	mov	si, mem_top
   252 00000182 B91000                  	mov	cx, 16
   253 00000185 F3A4                    	rep	movsb
   254                                  
   255                                  ; Set up the BIOS data area
   256                                  
   257 00000187 B84000                  	mov	ax, 0x40
   258 0000018A 8EC0                    	mov	es, ax
   259 0000018C BF0000                  	mov	di, 0
   260 0000018F BE[DA13]                	mov	si, bios_data
   261 00000192 B90001                  	mov	cx, 0x100
   262 00000195 F3A4                    	rep	movsb
   263                                  
   264                                  ; Clear video memory
   265                                  
   266 00000197 B800B8                  	mov	ax, 0xb800
   267 0000019A 8EC0                    	mov	es, ax
   268 0000019C BF0000                  	mov	di, 0
   269 0000019F B9D007                  	mov	cx, 80*25
   270 000001A2 B80007                  	mov	ax, 0x0700
   271 000001A5 F3AB                    	rep	stosw
   272                                  
   273                                  ; Clear video memory shadow buffer
   274                                  
   275 000001A7 B800C8                  	mov	ax, 0xc800
   276 000001AA 8EC0                    	mov	es, ax
   277 000001AC BF0000                  	mov	di, 0
   278 000001AF B9D007                  	mov	cx, 80*25
   279 000001B2 B80007                  	mov	ax, 0x0700
   280 000001B5 F3AB                    	rep	stosw
   281                                  
   282                                  ; Set up some I/O ports, between 0 and FFF. Most of them we set to 0xFF, to indicate no device present
   283                                  
   284 000001B7 BA6100                  	mov	dx, 0x61
   285 000001BA B000                    	mov	al, 0
   286 000001BC EE                      	out	dx, al		; Make sure the speaker is off
   287                                  
   288 000001BD BA6000                  	mov	dx, 0x60
   289 000001C0 EE                      	out	dx, al		; No scancode
   290                                  
   291 000001C1 BA6400                  	mov	dx, 0x64
   292 000001C4 EE                      	out	dx, al		; No key waiting
   293                                  
   294 000001C5 BA0000                  	mov	dx, 0
   295 000001C8 B0FF                    	mov	al, 0xFF
   296                                  
   297                                  next_out:
   298                                  
   299 000001CA 42                      	inc	dx
   300                                  
   301 000001CB 83FA40                  	cmp	dx, 0x40	; We deal with the PIT channel 0 later
   302 000001CE 74FA                    	je	next_out
   303 000001D0 83FA42                  	cmp	dx, 0x42	; We deal with the PIT channel 2 later
   304 000001D3 74F5                    	je	next_out
   305 000001D5 81FAB803                	cmp	dx, 0x3B8	; We deal with the Hercules port later, too
   306 000001D9 74EF                    	je	next_out
   307 000001DB 83FA60                  	cmp	dx, 0x60	; Keyboard scancode
   308 000001DE 74EA                    	je	next_out
   309 000001E0 83FA61                  	cmp	dx, 0x61	; Sound output
   310 000001E3 74E5                    	je	next_out
   311 000001E5 83FA64                  	cmp	dx, 0x64	; Keyboard status
   312 000001E8 74E0                    	je	next_out
   313                                  
   314 000001EA EE                      	out	dx, al
   315                                  
   316 000001EB 81FAFF0F                	cmp	dx, 0xFFF
   317 000001EF 7CD9                    	jl	next_out
   318                                  
   319 000001F1 B000                    	mov	al, 0
   320                                  
   321 000001F3 BADA03                  	mov	dx, 0x3DA	; CGA refresh port
   322 000001F6 EE                      	out	dx, al
   323                                  
   324 000001F7 BABA03                  	mov	dx, 0x3BA	; Hercules detection port
   325 000001FA EE                      	out	dx, al
   326                                  
   327 000001FB BAB803                  	mov	dx, 0x3B8	; Hercules video mode port
   328 000001FE EE                      	out	dx, al
   329                                  
   330 000001FF BABC03                  	mov	dx, 0x3BC	; LPT1
   331 00000202 EE                      	out	dx, al
   332                                  
   333 00000203 BA6200                  	mov	dx, 0x62	; PPI - needed for memory parity checks
   334 00000206 EE                      	out	dx, al
   335                                  
   336                                  ; Get initial RTC value
   337                                  
   338 00000207 0E                      	push	cs
   339 00000208 07                      	pop	es
   340 00000209 BB[F11D]                	mov	bx, timetable
   341                                  	extended_get_rtc
    19 0000020C 0F01                <1>  db 0x0f, 0x01
   342 0000020E 26A1[151E]              	mov	ax, [es:tm_msec]
   343 00000212 2EA3[8D16]              	mov	[cs:last_int8_msec], ax
   344                                  
   345                                  ; Read boot sector from FDD, and load it into 0:7C00
   346                                  
   347 00000216 B80000                  	mov	ax, 0
   348 00000219 8EC0                    	mov	es, ax
   349                                  
   350 0000021B B80102                  	mov	ax, 0x0201
   351 0000021E B600                    	mov	dh, 0
   352 00000220 2E8A16[7614]            	mov	dl, [cs:boot_device]
   353 00000225 B90100                  	mov	cx, 1
   354 00000228 BB007C                  	mov	bx, 0x7c00
   355 0000022B CD13                    	int	13h
   356                                  
   357                                  ; Jump to boot sector
   358                                  
   359 0000022D EA007C0000              	jmp	0:0x7c00
   360                                  
   361                                  ; ************************* INT 7h handler - keyboard driver (8086tiny internal)
   362                                  
   363                                  int7:	; Whenever the user presses a key, INT 7 is called by the emulator.
   364                                  	; ASCII character of the keystroke is at 0040:this_keystroke
   365                                  
   366 00000232 1E                      	push	ds
   367 00000233 06                      	push	es
   368 00000234 50                      	push	ax
   369 00000235 53                      	push	bx
   370 00000236 55                      	push	bp
   371                                  
   372 00000237 0E                      	push	cs
   373 00000238 1F                      	pop	ds
   374                                  
   375 00000239 BB4000                  	mov	bx, 0x40	; Set segment to BIOS data area segment (0x40)
   376 0000023C 8EC3                    	mov	es, bx
   377                                  
   378                                  	; Retrieve the keystroke
   379                                  
   380 0000023E 26A1A600                	mov	ax, [es:this_keystroke-bios_data]
   381 00000242 26C606A70000            	mov	byte [es:this_keystroke+1-bios_data], 0
   382                                  
   383                                    real_key:
   384                                  
   385 00000248 2EC606[8F16]00          	mov	byte [cs:last_key_sdl], 0
   386                                  
   387 0000024E F6C404                  	test	ah, 4 ; This key doesn't come from SDL
   388 00000251 7503E91D01              	jz	check_linux_bksp
   389                                  
   390 00000256 26C606170000            	mov	byte [es:keyflags1-bios_data], 0
   391 0000025C 26C606180000            	mov	byte [es:keyflags2-bios_data], 0
   392                                  
   393 00000262 2EC606[8F16]01          	mov	byte [cs:last_key_sdl], 1 ; Key down from SDL
   394                                  
   395 00000268 F6C440                  	test	ah, 0x40 ; Key up
   396 0000026B 7406                    	jz	sdl_check_specials
   397                                  
   398 0000026D 2EC606[8F16]02          	mov	byte [cs:last_key_sdl], 2 ; Key up from SDL
   399                                  
   400                                    sdl_check_specials:
   401                                  
   402 00000273 89C3                    	mov	bx, ax
   403 00000275 80E707                  	and	bh, 7 ; If key is between 52F and 534 (Shift/Ctrl/Alt), ignore the key state flags
   404 00000278 81FB2F05                	cmp	bx, 0x52f
   405 0000027C 7420                    	je	sdl_just_press_shift
   406 0000027E 81FB3005                	cmp	bx, 0x530
   407 00000282 741A                    	je	sdl_just_press_shift
   408 00000284 81FB3305                	cmp	bx, 0x533
   409 00000288 7423                    	je	sdl_just_press_alt
   410 0000028A 81FB3405                	cmp	bx, 0x534
   411 0000028E 741D                    	je	sdl_just_press_alt
   412 00000290 81FB3105                	cmp	bx, 0x531
   413 00000294 7426                    	je	sdl_just_press_ctrl
   414 00000296 81FB3205                	cmp	bx, 0x532
   415 0000029A 7420                    	je	sdl_just_press_ctrl
   416 0000029C EB2D                    	jmp	sdl_check_alt
   417                                  
   418                                    sdl_just_press_shift:
   419                                  
   420 0000029E B036                    	mov	al, 0x36 ; Shift
   421 000002A0 80E440                  	and	ah, 0x40 ; Key up?
   422 000002A3 00E0                    	add	al, ah
   423 000002A5 00E0                    	add	al, ah
   424 000002A7 E8940E                  	call	io_key_available
   425 000002AA E98A02                  	jmp	i2_dne
   426                                  
   427                                    sdl_just_press_alt:
   428                                  
   429 000002AD B038                    	mov	al, 0x38 ; Alt
   430 000002AF 80E440                  	and	ah, 0x40 ; Key up?
   431 000002B2 00E0                    	add	al, ah
   432 000002B4 00E0                    	add	al, ah
   433 000002B6 E8850E                  	call	io_key_available
   434 000002B9 E97B02                  	jmp	i2_dne
   435                                  
   436                                    sdl_just_press_ctrl:
   437                                  
   438 000002BC B01D                    	mov	al, 0x1d ; Ctrl
   439 000002BE 80E440                  	and	ah, 0x40 ; Key up?
   440 000002C1 00E0                    	add	al, ah
   441 000002C3 00E0                    	add	al, ah
   442 000002C5 E8760E                  	call	io_key_available
   443 000002C8 E96C02                  	jmp	i2_dne
   444                                  
   445                                    sdl_check_alt:
   446                                  
   447 000002CB F6C408                  	test	ah, 8 ; Alt+something?
   448 000002CE 740C                    	jz	sdl_no_alt
   449 000002D0 268006170008            	add	byte [es:keyflags1-bios_data], 8
   450 000002D6 268006180002            	add	byte [es:keyflags2-bios_data], 2
   451                                  
   452                                    sdl_no_alt:
   453                                  
   454 000002DC F6C420                  	test	ah, 0x20 ; Ctrl+something?
   455 000002DF 7406                    	jz	sdl_no_ctrl
   456 000002E1 268006170004            	add	byte [es:keyflags1-bios_data], 4
   457                                  
   458                                    sdl_no_ctrl:
   459                                  
   460 000002E7 F6C410                  	test	ah, 0x10 ; Shift+something?
   461 000002EA 7406                    	jz	sdl_no_mods
   462 000002EC 268006170001            	add	byte [es:keyflags1-bios_data], 1
   463                                  
   464                                    sdl_no_mods:
   465                                  
   466 000002F2 80E401                  	and	ah, 1 ; We have processed all SDL modifiers, so remove them
   467                                  
   468                                  	;cmp	ax, 160 ; Alt+Space?
   469                                  	;jne	next_sdl_alt_keys
   470                                  	;mov	al, ' '
   471                                  	;mov	byte [es:this_keystroke-bios_data], al
   472                                  
   473                                    check_sdl_f_keys:
   474                                  
   475 000002F5 3D2501                  	cmp	ax, 0x125
   476 000002F8 7603E93A02              	ja	i2_dne ; Unknown key
   477                                  
   478 000002FD 3D1A01                  	cmp	ax, 0x11a
   479 00000300 7211                    	jb	check_sdl_pgup_pgdn_keys
   480                                  
   481 00000302 2DDF00                  	sub	ax, 0xdf ; F1 - F10
   482 00000305 83F845                  	cmp	ax, 0x45
   483 00000308 7203                    	jb	check_sdl_f_keys2
   484 0000030A 83C012                  	add	ax, 0x12 ; F11 - F12
   485                                  
   486                                    check_sdl_f_keys2:
   487                                  
   488 0000030D 88C7                    	mov	bh, al
   489 0000030F B000                    	mov	al, 0
   490 00000311 EB46                    	jmp	sdl_scancode_xlat_done
   491                                  
   492                                    check_sdl_pgup_pgdn_keys:
   493                                  
   494 00000313 3D1601                  	cmp	ax, 0x116
   495 00000316 7213                    	jb	check_sdl_cursor_keys
   496 00000318 3D1901                  	cmp	ax, 0x119
   497 0000031B 770E                    	ja	check_sdl_cursor_keys
   498                                  
   499 0000031D 2D1601                  	sub	ax, 0x116
   500 00000320 BB[8116]                	mov	bx, pgup_pgdn_xlt
   501 00000323 2ED7                    	cs	xlat
   502                                  
   503 00000325 88C7                    	mov	bh, al
   504 00000327 B000                    	mov	al, 0
   505 00000329 EB2E                    	jmp	sdl_scancode_xlat_done
   506                                  
   507                                    check_sdl_cursor_keys:
   508                                  
   509 0000032B 3D1101                  	cmp	ax, 0x111 ; SDL cursor keys
   510 0000032E 7213                    	jb	sdl_process_key ; No special handling for other keys yet
   511                                  	
   512 00000330 2D1101                  	sub	ax, 0x111
   513 00000333 BB[7D16]                	mov	bx, unix_cursor_xlt
   514 00000336 D7                      	xlat	; Convert SDL cursor keys to scancode
   515                                  
   516 00000337 88C7                    	mov	bh, al
   517 00000339 B000                    	mov	al, 0
   518 0000033B 26C606A60000            	mov	byte [es:this_keystroke-bios_data], 0
   519 00000341 EB16                    	jmp	sdl_scancode_xlat_done
   520                                  
   521                                    sdl_process_key:
   522                                  
   523 00000343 3D0001                  	cmp	ax, 0x100
   524 00000346 7203E9EC01              	jae	i2_dne ; Unsupported key
   525 0000034B 3C7F                    	cmp	al, 0x7f ; SDL 0x7F backspace? Convert to 0x08
   526 0000034D 7502                    	jne	sdl_process_key2
   527 0000034F B008                    	mov	al, 8
   528                                  
   529                                    sdl_process_key2:
   530                                  
   531 00000351 50                      	push	ax
   532 00000352 BB[D914]                	mov	bx, a2scan_tbl ; ASCII to scancode table
   533 00000355 D7                      	xlat
   534 00000356 88C7                    	mov	bh, al
   535 00000358 58                      	pop	ax ; Scancode in BH, keycode in AL
   536                                  
   537                                    sdl_scancode_xlat_done:
   538                                  
   539 00000359 80C780                  	add	bh, 0x80 ; Key up scancode
   540 0000035C 2E803E[8F16]02          	cmp	byte [cs:last_key_sdl], 2 ; Key up?
   541 00000362 7407                    	je	sdl_not_in_buf
   542                                  
   543 00000364 80EF80                  	sub	bh, 0x80 ; Key down scancode
   544                                  
   545                                    sdl_key_down:
   546                                  
   547 00000367 26A2A600                	mov	[es:this_keystroke-bios_data], al
   548                                  		
   549                                    sdl_not_in_buf:
   550                                  
   551 0000036B 88F8                    	mov	al, bh
   552 0000036D E8CE0D                  	call	io_key_available
   553 00000370 E9C401                  	jmp	i2_dne	
   554                                  
   555                                    check_linux_bksp:
   556                                  
   557 00000373 3C00                    	cmp	al, 0 ; Null keystroke - ignore
   558 00000375 7503E9BD01              	je	i2_dne
   559                                  
   560 0000037A 3C7F                    	cmp	al, 0x7f ; Linux code for backspace - change to 8
   561 0000037C 7508                    	jne	after_check_bksp
   562                                  
   563 0000037E B008                    	mov	al, 8
   564 00000380 26C606A60008            	mov	byte [es:this_keystroke-bios_data], 8
   565                                  
   566                                    after_check_bksp:
   567                                  
   568 00000386 26803EA00001            	cmp	byte [es:next_key_fn-bios_data], 1 ; If previous keypress was Ctrl+F (signifying this key is is Fxx), skip checks for Ctrl+A (Alt+xx) and Ctrl+F (Fxx)
   569 0000038C 7503E92801              	je	i2_n
   570                                  
   571 00000391 3C01                    	cmp	al, 0x01 ; Ctrl+A pressed - this is the sequence for "next key is Alt+"
   572 00000393 751A                    	jne	i2_not_alt
   573                                  
   574 00000395 26C606170008            	mov	byte [es:keyflags1-bios_data], 8 ; Alt flag down
   575 0000039B 26C606180002            	mov	byte [es:keyflags2-bios_data], 2 ; Alt flag down
   576 000003A1 B038                    	mov	al, 0x38 ; Simulated Alt by Ctrl+A prefix?
   577 000003A3 E8980D                  	call	io_key_available
   578                                  
   579 000003A6 26C606A30001            	mov	byte [es:next_key_alt-bios_data], 1
   580 000003AC E98801                  	jmp	i2_dne
   581                                  
   582                                    i2_not_alt:
   583                                  
   584 000003AF 3C06                    	cmp	al, 0x06 ; Ctrl+F pressed - this is the sequence for "next key is Fxx"
   585 000003B1 7509                    	jne	i2_not_fn
   586                                  
   587 000003B3 26C606A00001            	mov	byte [es:next_key_fn-bios_data], 1
   588 000003B9 E97B01                  	jmp	i2_dne
   589                                  
   590                                    i2_not_fn:
   591                                  
   592 000003BC 26803EA50001            	cmp	byte [es:notranslate_flg-bios_data], 1 ; If no translation mode is on, just pass through the scan code. ASCII key is zero.
   593 000003C2 26C606A50000            	mov	byte [es:notranslate_flg-bios_data], 0
   594 000003C8 7509                    	jne	need_to_translate
   595                                  
   596 000003CA 26C606A60000            	mov	byte [es:this_keystroke-bios_data], 0
   597 000003D0 E90E01                  	jmp	after_translate
   598                                  
   599                                    need_to_translate:
   600                                  
   601 000003D3 3CE0                    	cmp	al, 0xe0 ; Some OSes return scan codes after 0xE0 for things like cursor moves. So, if we find it, set a flag saying the next code received should not be translated.
   602 000003D5 26C606A50001            	mov	byte [es:notranslate_flg-bios_data], 1
   603 000003DB 7503E95701              	je	i2_dne	; Don't add the 0xE0 to the keyboard buffer
   604                                  
   605 000003E0 26C606A50000            	mov	byte [es:notranslate_flg-bios_data], 0
   606                                  
   607 000003E6 3C1B                    	cmp	al, 0x1b ; ESC key pressed. Either this a "real" escape, or it is UNIX cursor keys. In either case, we do nothing now, except set a flag
   608 000003E8 751C                    	jne	i2_escnext
   609                                  
   610                                  	; If the last key pressed was ESC, then we need to stuff it
   611 000003EA 26803EA40001            	cmp	byte [es:escape_flag-bios_data], 1
   612 000003F0 750B                    	jne	i2_sf
   613                                  
   614                                  	; Stuff an ESC character
   615                                  	
   616 000003F2 26C606A6001B            	mov	byte [es:this_keystroke-bios_data], 0x1b
   617                                  
   618 000003F8 B001                    	mov	al, 0x01
   619 000003FA E8240D                  	call	keypress_release
   620                                  
   621                                    i2_sf:
   622                                  
   623 000003FD 26C606A40001            	mov	byte [es:escape_flag-bios_data], 1
   624 00000403 E93101                  	jmp	i2_dne
   625                                  
   626                                    i2_escnext:
   627                                  
   628                                  	; Check if the last key was an escape character
   629 00000406 26803EA40001            	cmp	byte [es:escape_flag-bios_data], 1
   630 0000040C 7524                    	jne	i2_noesc
   631                                  
   632                                  	; It is, so check if this key is a [ control character
   633 0000040E 3C5B                    	cmp	al, '[' ; [ key pressed
   634 00000410 7417                    	je	i2_esc
   635                                  
   636                                  	; It isn't, so stuff an ESC character plus this key
   637                                  	
   638 00000412 26C606A6001B            	mov	byte [es:this_keystroke-bios_data], 0x1b
   639                                  
   640 00000418 B001                    	mov	al, 0x01
   641 0000041A E8040D                  	call	keypress_release
   642                                  
   643                                  	; Now actually process this key
   644 0000041D 26C606A40000            	mov	byte [es:escape_flag-bios_data], 0
   645 00000423 26A0A600                	mov	al, [es:this_keystroke-bios_data]
   646 00000427 EB09                    	jmp	i2_noesc
   647                                  
   648                                    i2_esc:
   649                                  
   650                                  	; Last + this characters are ESC ] - do nothing now, but set escape flag
   651 00000429 26C606A40002            	mov	byte [es:escape_flag-bios_data], 2
   652 0000042F E90501                  	jmp	i2_dne
   653                                  
   654                                    i2_noesc:
   655                                  
   656 00000432 26803EA40002            	cmp	byte [es:escape_flag-bios_data], 2
   657 00000438 751B                    	jne	i2_regular_key
   658                                  
   659                                  	; No shifts or Alt for cursor keys
   660 0000043A 26C606170000            	mov	byte [es:keyflags1-bios_data], 0
   661 00000440 26C606180000            	mov	byte [es:keyflags2-bios_data], 0
   662                                  
   663                                  	; Last + this characters are ESC ] xxx - cursor key, so translate and stuff it
   664 00000446 2C41                    	sub	al, 'A'
   665 00000448 BB[7D16]                	mov	bx, unix_cursor_xlt
   666 0000044B D7                      	xlat
   667                                  
   668 0000044C 26C606A60000            	mov	byte [es:this_keystroke-bios_data], 0
   669 00000452 E98C00                  	jmp	after_translate
   670                                  	
   671                                    i2_regular_key:
   672                                  
   673 00000455 26C606A50000            	mov	byte [es:notranslate_flg-bios_data], 0
   674                                  
   675 0000045B BB[5915]                	mov	bx, a2shift_tbl ; ASCII to shift code table
   676 0000045E D7                      	xlat
   677                                  
   678                                  	; Now, BL is 1 if shift is down, 0 otherwise. If shift is down, put a shift down scan code
   679                                  	; in port 0x60. Then call int 9. Otherwise, put a shift up scan code in, and call int 9.
   680                                  
   681 0000045F 50                      	push	ax
   682                                  
   683                                  	; Put shift flags in BIOS, 0040:0017. Add 8 to shift flags if Alt is down.
   684 00000460 268A26A300              	mov	ah, [es:next_key_alt-bios_data]
   685                                  	cpu	186
   686 00000465 C0E403                  	shl	ah, 3
   687                                  	cpu	8086
   688 00000468 00E0                    	add	al, ah
   689                                  
   690 0000046A 26803EA6001A            	cmp	byte [es:this_keystroke-bios_data], 0x1A ; Ctrl+A to Ctrl+Z? Then add Ctrl to BIOS key flags
   691 00000470 7731                    	ja	i2_no_ctrl
   692 00000472 26803EA60000            	cmp	byte [es:this_keystroke-bios_data], 0
   693 00000478 7429                    	je	i2_no_ctrl
   694 0000047A 26803EA6000D            	cmp	byte [es:this_keystroke-bios_data], 0xD ; CR
   695 00000480 7421                    	je	i2_no_ctrl
   696 00000482 26803EA6000A            	cmp	byte [es:this_keystroke-bios_data], 0xA ; LF
   697 00000488 7419                    	je	i2_no_ctrl
   698 0000048A 26803EA60008            	cmp	byte [es:this_keystroke-bios_data], 0x8 ; Backspace
   699 00000490 7411                    	je	i2_no_ctrl
   700 00000492 26803EA60009            	cmp	byte [es:this_keystroke-bios_data], 0x9 ; Tab
   701 00000498 7409                    	je	i2_no_ctrl
   702 0000049A 0404                    	add	al, 4 ; Ctrl in key flags
   703                                  
   704 0000049C 50                      	push	ax
   705 0000049D B01D                    	mov	al, 0x1d ; Ctrl key down
   706 0000049F E89C0C                  	call	io_key_available
   707 000004A2 58                      	pop	ax
   708                                  
   709                                    i2_no_ctrl:
   710                                  
   711 000004A3 26A21700                	mov	[es:keyflags1-bios_data], al
   712                                  
   713                                  	cpu	186
   714 000004A7 C0EC02                  	shr	ah, 2
   715                                  	cpu	8086
   716 000004AA 2688261800              	mov	[es:keyflags2-bios_data], ah
   717                                  
   718 000004AF 58                      	pop	ax
   719                                  
   720 000004B0 A801                    	test	al, 1 ; Shift down?
   721 000004B2 7405                    	jz	i2_n
   722                                  
   723 000004B4 B036                    	mov	al, 0x36 ; Right shift down
   724 000004B6 E8850C                  	call	io_key_available
   725                                  
   726                                    i2_n:
   727                                  
   728 000004B9 26A0A600                	mov	al, [es:this_keystroke-bios_data]
   729                                  
   730 000004BD BB[D914]                	mov	bx, a2scan_tbl ; ASCII to scan code table
   731 000004C0 D7                      	xlat
   732                                  
   733 000004C1 26803EA00001            	cmp	byte [es:next_key_fn-bios_data], 1	; Fxx?
   734 000004C7 7518                    	jne	after_translate
   735                                  
   736 000004C9 26803EA60001            	cmp	byte [es:this_keystroke-bios_data], 1 ; Ctrl+F then Ctrl+A outputs code for Ctrl+A
   737 000004CF 7410                    	je	after_translate
   738                                  
   739 000004D1 26803EA60006            	cmp	byte [es:this_keystroke-bios_data], 6 ; Ctrl+F then Ctrl+F outputs code for Ctrl+F  
   740 000004D7 7408                    	je	after_translate
   741                                  	
   742 000004D9 26C606A60000            	mov	byte [es:this_keystroke-bios_data], 0	; Fxx key, so zero out ASCII code
   743 000004DF 0439                    	add	al, 0x39
   744                                  
   745                                    after_translate:
   746                                  
   747 000004E1 26C606A40000            	mov	byte [es:escape_flag-bios_data], 0
   748 000004E7 26C606A20000            	mov	byte [es:escape_flag_last-bios_data], 0
   749                                  
   750                                  	; If the key is actually an Alt+ key we use an ASCII code of 0 instead of the real value.
   751                                  
   752 000004ED 26803EA30001            	cmp	byte [es:next_key_alt-bios_data], 1
   753 000004F3 7506                    	jne	skip_ascii_zero
   754                                  
   755 000004F5 26C606A60000            	mov	byte [es:this_keystroke-bios_data], 0
   756                                  
   757                                    skip_ascii_zero:
   758                                  
   759                                  	; Output key down/key up event (scancode in AL) to keyboard port
   760 000004FB E8230C                  	call	keypress_release
   761                                  
   762                                  	; If scan code is not 0xE0, then also send right shift up if necessary
   763 000004FE 3CE0                    	cmp	al, 0xe0
   764 00000500 7435                    	je	i2_dne
   765                                  
   766 00000502 26F606170001            	test	byte [es:keyflags1-bios_data], 1
   767 00000508 7405                    	jz	check_ctrl
   768                                  
   769 0000050A B0B6                    	mov	al, 0xb6 ; Right shift up
   770 0000050C E82F0C                  	call	io_key_available
   771                                  
   772                                    check_ctrl:
   773                                  
   774 0000050F 26F606170004            	test	byte [es:keyflags1-bios_data], 4
   775 00000515 7405                    	jz	check_alt
   776                                  
   777 00000517 B09D                    	mov	al, 0x9d ; Right Ctrl up
   778 00000519 E8220C                  	call	io_key_available
   779                                  
   780                                    check_alt:
   781                                  
   782 0000051C 26A0A300                	mov	al, byte [es:next_key_alt-bios_data]
   783 00000520 26C606A30000            	mov	byte [es:next_key_alt-bios_data], 0
   784 00000526 26C606A00000            	mov	byte [es:next_key_fn-bios_data], 0
   785                                  
   786 0000052C 3C01                    	cmp	al, 1
   787 0000052E 7402                    	je	endalt
   788                                  
   789 00000530 EB05                    	jmp	i2_dne
   790                                  
   791                                    endalt:
   792                                  
   793 00000532 B0B8                    	mov	al, 0xb8 ; Left Alt up
   794 00000534 E8070C                  	call	io_key_available
   795                                  
   796                                    i2_dne:
   797                                  
   798 00000537 5D                      	pop	bp
   799 00000538 5B                      	pop	bx
   800 00000539 58                      	pop	ax
   801 0000053A 07                      	pop	es
   802 0000053B 1F                      	pop	ds
   803 0000053C CF                      	iret
   804                                  
   805                                  ; ************************* INT 9h handler - keyboard (PC BIOS standard)
   806                                  
   807                                  int9:
   808                                  
   809 0000053D 06                      	push	es
   810 0000053E 50                      	push	ax
   811 0000053F 53                      	push	bx
   812 00000540 55                      	push	bp
   813                                  
   814 00000541 E460                    	in	al, 0x60
   815                                  
   816 00000543 3C80                    	cmp	al, 0x80 ; Key up?
   817 00000545 732D                    	jae	no_add_buf
   818 00000547 3C36                    	cmp	al, 0x36 ; Shift?
   819 00000549 7429                    	je	no_add_buf
   820 0000054B 3C38                    	cmp	al, 0x38 ; Alt?
   821 0000054D 7425                    	je	no_add_buf
   822 0000054F 3C1D                    	cmp	al, 0x1d ; Ctrl?
   823 00000551 7421                    	je	no_add_buf
   824                                  
   825 00000553 BB4000                  	mov	bx, 0x40
   826 00000556 8EC3                    	mov	es, bx
   827                                  
   828 00000558 88C7                    	mov	bh, al
   829 0000055A 26A0A600                	mov	al, [es:this_keystroke-bios_data]
   830                                  
   831                                  	; Tail of the BIOS keyboard buffer goes in BP. This is where we add new keystrokes
   832                                  
   833 0000055E 268B2E1C00              	mov	bp, [es:kbbuf_tail-bios_data]
   834 00000563 26884600                	mov	byte [es:bp], al ; ASCII code
   835 00000567 26887E01                	mov	byte [es:bp+1], bh ; Scan code
   836                                  
   837                                  	; ESC keystroke is in the buffer now
   838 0000056B 2683061C0002            	add	word [es:kbbuf_tail-bios_data], 2
   839 00000571 E8470A                  	call	kb_adjust_buf ; Wrap the tail around the head if the buffer gets too large
   840                                  
   841                                    no_add_buf:
   842                                  
   843 00000574 B001                    	mov	al, 1
   844 00000576 E664                    	out	0x64, al
   845                                  
   846 00000578 5D                      	pop	bp
   847 00000579 5B                      	pop	bx
   848 0000057A 58                      	pop	ax
   849 0000057B 07                      	pop	es
   850                                  
   851 0000057C CF                      	iret
   852                                  
   853                                  ; ************************* INT Ah handler - timer (8086tiny internal)
   854                                  
   855                                  inta:
   856                                  	; 8086tiny called interrupt 0xA frequently, at a rate dependent on the speed of your computer.
   857                                  	; This interrupt handler scales down the call rate and calls INT 8 at 18.2 times per second,
   858                                  	; as per a real PC.
   859                                  
   860                                  	; See if there is an ESC waiting from a previous INT 7h. If so, put it in the keyboard buffer
   861                                  	; (because by now - 1/18.2 secs on - we know it can't be part of an escape key sequence).
   862                                  	; Also handle CGA refresh register. Also release any keys that are still marked as down.
   863                                  
   864 0000057D 50                      	push	ax
   865 0000057E 53                      	push	bx
   866 0000057F 52                      	push	dx
   867 00000580 55                      	push	bp
   868 00000581 06                      	push	es
   869                                  
   870 00000582 51                      	push	cx
   871 00000583 57                      	push	di
   872 00000584 1E                      	push	ds
   873 00000585 56                      	push	si
   874                                  
   875 00000586 E8D60B                  	call	vmem_driver_entry	; CGA text mode driver - documented later
   876                                  
   877                                  	; Increment 32-bit BIOS timer tick counter, once every 18.2 ms
   878                                  
   879 00000589 0E                      	push	cs
   880 0000058A 07                      	pop	es
   881 0000058B BB[F11D]                	mov	bx, timetable
   882                                  	extended_get_rtc
    19 0000058E 0F01                <1>  db 0x0f, 0x01
   883                                  	
   884 00000590 2EA1[151E]              	mov	ax, [cs:tm_msec]
   885 00000594 2E2B06[8D16]            	sub	ax, [cs:last_int8_msec]
   886                                  
   887                                    make_ctr_positive:
   888                                  
   889 00000599 83F800                  	cmp	ax, 0
   890 0000059C 7D05                    	jge	no_add_1000
   891                                  
   892 0000059E 05E803                  	add	ax, 1000
   893 000005A1 EBF6                    	jmp	make_ctr_positive
   894                                  
   895                                    no_add_1000:
   896                                  
   897 000005A3 BB4000                  	mov	bx, 0x40
   898 000005A6 8EC3                    	mov	es, bx
   899                                  
   900 000005A8 BA0000                  	mov	dx, 0
   901 000005AB BBA904                  	mov	bx, 1193
   902 000005AE F7E3                    	mul	bx
   903                                  
   904 000005B0 268B1EA800              	mov	bx, [es:timer0_freq-bios_data]
   905                                  
   906 000005B5 83FB00                  	cmp	bx, 0 ; 0 actually means FFFF
   907 000005B8 7503                    	jne	no_adjust_10000
   908                                  
   909 000005BA BBFFFF                  	mov	bx, 0xffff
   910                                  
   911                                    no_adjust_10000:
   912                                  
   913 000005BD F7F3                    	div	bx ; AX now contains number of timer ticks since last int 8 (DX is remainder)
   914                                  
   915 000005BF 83F800                  	cmp	ax, 0
   916 000005C2 746A                    	je	i8_end
   917                                  
   918 000005C4 2601066C00              	add	word [es:0x6C], ax
   919 000005C9 2683166E0000            	adc	word [es:0x6E], 0
   920                                  
   921                                  inta_call_int8:
   922                                  
   923 000005CF 50                      	push	ax	; Workaround for CPM-86 - INT 1C destroys AX!!
   924 000005D0 CD08                    	int	8
   925 000005D2 58                      	pop	ax
   926                                  
   927 000005D3 48                      	dec	ax
   928 000005D4 83F800                  	cmp	ax, 0
   929 000005D7 75F6                    	jne	inta_call_int8
   930                                  
   931 000005D9 2EA1[151E]              	mov	ax, [cs:tm_msec]
   932 000005DD 2EA3[8D16]              	mov	[cs:last_int8_msec], ax
   933                                  
   934                                  skip_timer_increment:
   935                                  
   936                                  	; If last key was from SDL, don't simulate key up events (SDL will do it for us)
   937 000005E1 2E803E[8F16]00          	cmp	byte [cs:last_key_sdl], 0
   938 000005E7 7545                    	jne	i8_end
   939                                  
   940                                  	; See if we have any keys down. If so, release them
   941 000005E9 26803E9F0000            	cmp	byte [es:key_now_down-bios_data], 0
   942 000005EF 740F                    	je	i8_no_key_down
   943                                  
   944 000005F1 26A09F00                	mov	al, [es:key_now_down-bios_data]
   945 000005F5 26C6069F0000            	mov	byte [es:key_now_down-bios_data], 0
   946 000005FB 0480                    	add	al, 0x80
   947 000005FD E83E0B                  	call	io_key_available
   948                                  
   949                                    i8_no_key_down:
   950                                  
   951                                  	; See if we have a waiting ESC flag
   952 00000600 26803EA40001            	cmp	byte [es:escape_flag-bios_data], 1
   953 00000606 7526                    	jne	i8_end
   954                                  	
   955                                  	; Did we have one last two cycles as well?
   956 00000608 26803EA20001            	cmp	byte [es:escape_flag_last-bios_data], 1
   957 0000060E 7407                    	je	i8_stuff_esc
   958                                  
   959 00000610 26FE06A200              	inc	byte [es:escape_flag_last-bios_data]
   960 00000615 EB17                    	jmp	i8_end
   961                                  
   962                                  i8_stuff_esc:
   963                                  
   964                                  	; Yes, clear the ESC flag and put it in the keyboard buffer
   965 00000617 26C606A40000            	mov	byte [es:escape_flag-bios_data], 0
   966 0000061D 26C606A20000            	mov	byte [es:escape_flag_last-bios_data], 0
   967                                  
   968                                  	; mov	bp, [es:kbbuf_tail-bios_data]
   969                                  	; mov	byte [es:bp], 0x1b ; ESC ASCII code
   970                                  	; mov	byte [es:bp+1], 0x01 ; ESC scan code
   971                                  
   972                                  	; ESC keystroke is in the buffer now
   973                                  	; add	word [es:kbbuf_tail-bios_data], 2
   974                                  	; call	kb_adjust_buf ; Wrap the tail around the head if the buffer gets too large
   975                                  
   976 00000623 26C606A6001B            	mov	byte [es:this_keystroke-bios_data], 0x1b
   977                                  
   978                                  	; Push out ESC keypress/release
   979 00000629 B001                    	mov	al, 0x01
   980 0000062B E8F30A                  	call	keypress_release
   981                                  
   982                                  i8_end:	
   983                                  
   984                                  	; A Hercules graphics adapter flips bit 7 of I/O port 3BA on refresh
   985 0000062E BABA03                  	mov	dx, 0x3BA
   986 00000631 EC                      	in 	al, dx
   987 00000632 3480                    	xor	al, 0x80
   988 00000634 EE                      	out	dx, al
   989                                  
   990 00000635 5E                      	pop	si
   991 00000636 1F                      	pop	ds
   992 00000637 5F                      	pop	di
   993 00000638 59                      	pop	cx
   994                                  	
   995 00000639 07                      	pop	es
   996 0000063A 5D                      	pop	bp
   997 0000063B 5A                      	pop	dx
   998 0000063C 5B                      	pop	bx
   999 0000063D 58                      	pop	ax
  1000                                  
  1001 0000063E CF                      	iret
  1002                                  
  1003                                  ; ************************* INT 8h handler - timer
  1004                                  
  1005                                  int8:
  1006                                  
  1007 0000063F CD1C                    	int	0x1c
  1008 00000641 CF                      	iret
  1009                                  
  1010                                  ; ************************* INT 10h handler - video services
  1011                                  
  1012                                  int10:
  1013                                  
  1014 00000642 80FC00                  	cmp	ah, 0x00 ; Set video mode
  1015 00000645 7449                    	je	int10_set_vm
  1016 00000647 80FC01                  	cmp	ah, 0x01 ; Set cursor shape
  1017 0000064A 7503E9E800              	je	int10_set_cshape
  1018 0000064F 80FC02                  	cmp	ah, 0x02 ; Set cursor position
  1019 00000652 7503E90601              	je	int10_set_cursor
  1020 00000657 80FC03                  	cmp	ah, 0x03 ; Get cursur position
  1021 0000065A 7503E95401              	je	int10_get_cursor
  1022 0000065F 80FC06                  	cmp	ah, 0x06 ; Scroll up window
  1023 00000662 7503E96101              	je	int10_scrollup
  1024 00000667 80FC07                  	cmp	ah, 0x07 ; Scroll down window
  1025 0000066A 7503E97B02              	je	int10_scrolldown
  1026 0000066F 80FC08                  	cmp	ah, 0x08 ; Get character at cursor
  1027 00000672 7503E99603              	je	int10_charatcur
  1028 00000677 80FC09                  	cmp	ah, 0x09 ; Write char and attribute
  1029 0000067A 7503E9F703              	je	int10_write_char_attrib
  1030 0000067F 80FC0E                  	cmp	ah, 0x0e ; Write character at cursor position
  1031 00000682 7503E9B803              	je	int10_write_char
  1032 00000687 80FC0F                  	cmp	ah, 0x0f ; Get video mode
  1033 0000068A 7503E90705              	je	int10_get_vm
  1034                                  	; cmp	ah, 0x1a ; Feature check
  1035                                  	; je	int10_features
  1036                                  
  1037 0000068F CF                      	iret
  1038                                  
  1039                                    int10_set_vm:
  1040                                  
  1041 00000690 52                      	push	dx
  1042 00000691 51                      	push	cx
  1043 00000692 53                      	push	bx
  1044 00000693 06                      	push	es
  1045                                  
  1046 00000694 3C04                    	cmp	al, 4 ; CGA mode 4
  1047 00000696 743D                    	je	int10_switch_to_cga_gfx
  1048 00000698 3C05                    	cmp	al, 5
  1049 0000069A 7439                    	je	int10_switch_to_cga_gfx
  1050 0000069C 3C06                    	cmp	al, 6
  1051 0000069E 7435                    	je	int10_switch_to_cga_gfx
  1052                                  
  1053 000006A0 50                      	push	ax
  1054                                  
  1055 000006A1 BAB803                  	mov	dx, 0x3b8
  1056 000006A4 B000                    	mov	al, 0
  1057 000006A6 EE                      	out	dx, al
  1058                                  
  1059 000006A7 BAB403                  	mov	dx, 0x3b4
  1060 000006AA B001                    	mov	al, 1		; Hercules CRTC "horizontal displayed" register select
  1061 000006AC EE                      	out	dx, al
  1062 000006AD BAB503                  	mov	dx, 0x3b5
  1063 000006B0 B02D                    	mov	al, 0x2d	; 0x2D = 45 (* 16) = 720 pixels wide (GRAPHICS_X)
  1064 000006B2 EE                      	out	dx, al
  1065 000006B3 BAB403                  	mov	dx, 0x3b4
  1066 000006B6 B006                    	mov	al, 6		; Hercules CRTC "vertical displayed" register select
  1067 000006B8 EE                      	out	dx, al
  1068 000006B9 BAB503                  	mov	dx, 0x3b5
  1069 000006BC B057                    	mov	al, 0x57	; 0x57 = 87 (* 4) = 348 pixels high (GRAPHICS_Y)
  1070 000006BE EE                      	out	dx, al
  1071                                  
  1072 000006BF BA4000                  	mov	dx, 0x40
  1073 000006C2 8EC2                    	mov	es, dx
  1074                                  
  1075 000006C4 26C606AC0000            	mov	byte [es:0xac], 0 ; Tell emulator we are in Hercules mode
  1076                                  
  1077 000006CA 58                      	pop	ax
  1078                                  
  1079 000006CB 3C07                    	cmp	al, 7		; If an app tries to set Hercules text mode 7, actually set mode 3 (we do not support mode 7's video memory buffer at B000:0)
  1080 000006CD 743D                    	je	int10_set_vm_3
  1081 000006CF 3C02                    	cmp	al, 2		; Same for text mode 2 (mono)
  1082 000006D1 7439                    	je	int10_set_vm_3
  1083                                  
  1084 000006D3 EB39                    	jmp	int10_set_vm_continue
  1085                                  
  1086                                    int10_switch_to_cga_gfx:
  1087                                  
  1088                                  	; Switch to CGA-like graphics mode (with Hercules CRTC set for 640 x 400)
  1089                                  	
  1090 000006D5 BA4000                  	mov	dx, 0x40
  1091 000006D8 8EC2                    	mov	es, dx
  1092                                  
  1093 000006DA 26A24900                	mov	[es:0x49], al	; Current video mode
  1094 000006DE 26C606AC0001            	mov	byte [es:0xac], 1 ; Tell emulator we are in CGA mode
  1095                                  
  1096 000006E4 BAB403                  	mov	dx, 0x3b4
  1097 000006E7 B001                    	mov	al, 1		; Hercules CRTC "horizontal displayed" register select
  1098 000006E9 EE                      	out	dx, al
  1099 000006EA BAB503                  	mov	dx, 0x3b5
  1100 000006ED B028                    	mov	al, 0x28	; 0x28 = 40 (* 16) = 640 pixels wide (GRAPHICS_X)
  1101 000006EF EE                      	out	dx, al
  1102 000006F0 BAB403                  	mov	dx, 0x3b4
  1103 000006F3 B006                    	mov	al, 6		; Hercules CRTC "vertical displayed" register select
  1104 000006F5 EE                      	out	dx, al
  1105 000006F6 BAB503                  	mov	dx, 0x3b5
  1106 000006F9 B064                    	mov	al, 0x64	; 0x64 = 100 (* 4) = 400 pixels high (GRAPHICS_Y)
  1107 000006FB EE                      	out	dx, al
  1108                                  
  1109 000006FC BAB803                  	mov	dx, 0x3b8
  1110 000006FF B08A                    	mov	al, 0x8a
  1111 00000701 EE                      	out	dx, al
  1112                                  
  1113 00000702 B707                    	mov	bh, 7	
  1114 00000704 E85009                  	call	clear_screen
  1115                                  
  1116 00000707 B83000                  	mov	ax, 0x30
  1117 0000070A EB26                    	jmp	svmn_exit
  1118                                  
  1119                                    int10_set_vm_3:
  1120                                  
  1121 0000070C B003                    	mov	al, 3
  1122                                  
  1123                                    int10_set_vm_continue:
  1124                                  
  1125 0000070E BB4000                  	mov	bx, 0x40
  1126 00000711 8EC3                    	mov	es, bx
  1127                                  
  1128 00000713 26A24900                	mov	[es:vidmode-bios_data], al
  1129                                  
  1130 00000717 B707                    	mov	bh, 7		; Black background, white foreground
  1131 00000719 E83B09                  	call	clear_screen	; ANSI clear screen
  1132                                  
  1133 0000071C 26803E490006            	cmp	byte [es:vidmode-bios_data], 6
  1134 00000722 7404                    	je	set6
  1135 00000724 B030                    	mov	al, 0x30
  1136 00000726 EB02                    	jmp	svmn
  1137                                  
  1138                                    set6:
  1139                                  
  1140 00000728 B03F                    	mov	al, 0x3f
  1141                                  
  1142                                    svmn:
  1143                                  
  1144                                  	; Take Hercules adapter out of graphics mode when resetting video mode via int 10
  1145 0000072A 50                      	push	ax
  1146 0000072B BAB803                  	mov	dx, 0x3B8
  1147 0000072E B000                    	mov	al, 0
  1148 00000730 EE                      	out	dx, al
  1149 00000731 58                      	pop	ax
  1150                                  
  1151                                    svmn_exit:
  1152                                  
  1153 00000732 07                      	pop	es
  1154 00000733 5B                      	pop	bx
  1155 00000734 59                      	pop	cx
  1156 00000735 5A                      	pop	dx
  1157 00000736 CF                      	iret
  1158                                  
  1159                                    int10_set_cshape:
  1160                                  
  1161 00000737 1E                      	push	ds
  1162 00000738 50                      	push	ax
  1163 00000739 51                      	push	cx
  1164                                  
  1165 0000073A B84000                  	mov	ax, 0x40
  1166 0000073D 8ED8                    	mov	ds, ax
  1167                                  
  1168 0000073F C606A10001              	mov	byte [cursor_visible-bios_data], 1	; Show cursor
  1169                                  
  1170 00000744 80E560                  	and	ch, 01100000b
  1171 00000747 80FD20                  	cmp	ch, 00100000b
  1172 0000074A 750A                    	jne	cur_visible
  1173                                  
  1174 0000074C C606A10000              	mov	byte [cursor_visible-bios_data], 0	; Hide cursor
  1175 00000751 E86D0C                  	call	ansi_hide_cursor
  1176 00000754 EB03                    	jmp	cur_done
  1177                                  
  1178                                      cur_visible:
  1179                                  
  1180 00000756 E84F0C                  	call	ansi_show_cursor
  1181                                  
  1182                                      cur_done:
  1183                                  
  1184 00000759 59                      	pop	cx
  1185 0000075A 58                      	pop	ax
  1186 0000075B 1F                      	pop	ds
  1187 0000075C CF                      	iret
  1188                                  
  1189                                    int10_set_cursor:
  1190                                  
  1191 0000075D 1E                      	push	ds
  1192 0000075E 50                      	push	ax
  1193                                  
  1194 0000075F B84000                  	mov	ax, 0x40
  1195 00000762 8ED8                    	mov	ds, ax
  1196                                  
  1197 00000764 88365100                	mov	[curpos_y-bios_data], dh
  1198 00000768 88369E00                	mov	[crt_curpos_y-bios_data], dh
  1199 0000076C 88165000                	mov	[curpos_x-bios_data], dl
  1200 00000770 88169D00                	mov	[crt_curpos_x-bios_data], dl
  1201                                  
  1202 00000774 80FE18                  	cmp	dh, 24
  1203 00000777 7605                    	jbe	skip_set_cur_row_max
  1204                                  
  1205                                  	; If cursor is moved off the screen, then hide it
  1206 00000779 E8450C                  	call	ansi_hide_cursor
  1207 0000077C EB32                    	jmp	skip_set_cur_ansi
  1208                                  	
  1209                                      skip_set_cur_row_max:
  1210                                  
  1211 0000077E 80FA4F                       	cmp	dl, 79
  1212 00000781 7605                    	jbe	skip_set_cur_col_max
  1213                                  
  1214                                  	; If cursor is moved off the screen, then hide it
  1215 00000783 E83B0C                  	call	ansi_hide_cursor
  1216 00000786 EB28                    	jmp	skip_set_cur_ansi
  1217                                  	
  1218                                      skip_set_cur_col_max:
  1219                                  
  1220 00000788 B01B                    	mov	al, 0x1B	; ANSI
  1221                                  	extended_putchar_al
    15 0000078A 0F00                <1>  db 0x0f, 0x00
  1222 0000078C B05B                    	mov	al, '['		; ANSI
  1223                                  	extended_putchar_al
    15 0000078E 0F00                <1>  db 0x0f, 0x00
  1224 00000790 88F0                    	mov	al, dh		; Row number
  1225 00000792 FEC0                    	inc	al
  1226 00000794 E80F08                  	call	puts_decimal_al
  1227 00000797 B03B                    	mov	al, ';'		; ANSI
  1228                                  	extended_putchar_al
    15 00000799 0F00                <1>  db 0x0f, 0x00
  1229 0000079B 88D0                    	mov	al, dl		; Column number
  1230 0000079D FEC0                    	inc	al
  1231 0000079F E80408                  	call	puts_decimal_al
  1232 000007A2 B048                    	mov	al, 'H'		; Set cursor position command
  1233                                  	extended_putchar_al
    15 000007A4 0F00                <1>  db 0x0f, 0x00
  1234                                  
  1235 000007A6 803EA10001              	cmp	byte [cursor_visible-bios_data], 1
  1236 000007AB 7503                    	jne	skip_set_cur_ansi
  1237 000007AD E8F80B                  	call	ansi_show_cursor
  1238                                  
  1239                                      skip_set_cur_ansi:
  1240                                  
  1241 000007B0 58                      	pop	ax
  1242 000007B1 1F                      	pop	ds
  1243 000007B2 CF                      	iret
  1244                                  
  1245                                    int10_get_cursor:
  1246                                  
  1247 000007B3 06                      	push	es
  1248                                  
  1249 000007B4 B94000                  	mov	cx, 0x40
  1250 000007B7 8EC1                    	mov	es, cx
  1251                                  
  1252 000007B9 B90706                  	mov	cx, 0x0607
  1253 000007BC 268A165000              	mov	dl, [es:curpos_x-bios_data]
  1254 000007C1 268A365100              	mov	dh, [es:curpos_y-bios_data]
  1255                                  
  1256 000007C6 07                      	pop	es
  1257                                  
  1258 000007C7 CF                      	iret
  1259                                  
  1260                                    int10_scrollup:
  1261                                  
  1262 000007C8 53                      	push	bx
  1263 000007C9 51                      	push	cx
  1264 000007CA 55                      	push	bp
  1265 000007CB 50                      	push	ax
  1266                                  
  1267 000007CC 89DD                    	mov	bp, bx		; Convert from CGA to ANSI
  1268 000007CE B10C                    	mov	cl, 12
  1269 000007D0 D3CD                    	ror	bp, cl
  1270 000007D2 83E507                  	and	bp, 7
  1271 000007D5 2E8A9E[5516]            	mov	bl, byte [cs:bp+colour_table]
  1272 000007DA 80C30A                  	add	bl, 10
  1273                                  
  1274 000007DD B01B                    	mov	al, 0x1B	; Escape
  1275                                  	extended_putchar_al
    15 000007DF 0F00                <1>  db 0x0f, 0x00
  1276 000007E1 B05B                    	mov	al, '['		; ANSI
  1277                                  	extended_putchar_al
    15 000007E3 0F00                <1>  db 0x0f, 0x00
  1278 000007E5 88D8                    	mov	al, bl		; Background colour
  1279 000007E7 E8BC07                  	call	puts_decimal_al
  1280 000007EA B06D                    	mov	al, 'm'		; Set cursor position command
  1281                                  	extended_putchar_al
    15 000007EC 0F00                <1>  db 0x0f, 0x00
  1282                                  
  1283 000007EE 58                      	pop	ax
  1284 000007EF 5D                      	pop	bp
  1285 000007F0 59                      	pop	cx
  1286 000007F1 5B                      	pop	bx
  1287                                  
  1288 000007F2 3C00                    	cmp	al, 0 ; Clear window
  1289 000007F4 7513                    	jne	cls_partial
  1290                                  
  1291 000007F6 83F900                  	cmp	cx, 0 ; Start of screen
  1292 000007F9 750E                    	jne	cls_partial
  1293                                  
  1294 000007FB 80FA4F                  	cmp	dl, 0x4f ; Clearing columns 0-79
  1295 000007FE 7209                    	jb	cls_partial
  1296                                  
  1297 00000800 80FE18                  	cmp	dh, 0x18 ; Clearing rows 0-24 (or more)
  1298 00000803 7204                    	jb	cls_partial
  1299                                  
  1300 00000805 E84F08                  	call	clear_screen
  1301 00000808 CF                      	iret
  1302                                  
  1303                                    cls_partial:
  1304                                  
  1305 00000809 50                      	push 	ax
  1306 0000080A 53                      	push	bx
  1307                                  
  1308 0000080B 88C3                    	mov	bl, al		; Number of rows to scroll are now in bl
  1309 0000080D 80FB00                  	cmp	bl, 0		; Clear whole window?
  1310 00000810 7502                    	jne	cls_partial_up_whole
  1311                                  
  1312 00000812 B319                    	mov	bl, 25		; 25 rows
  1313                                  
  1314                                    cls_partial_up_whole:
  1315                                  
  1316 00000814 B01B                    	mov	al, 0x1B	; Escape
  1317                                  	extended_putchar_al
    15 00000816 0F00                <1>  db 0x0f, 0x00
  1318 00000818 B05B                    	mov	al, '['		; ANSI
  1319                                  	extended_putchar_al
    15 0000081A 0F00                <1>  db 0x0f, 0x00
  1320                                  
  1321 0000081C 80FD00                  	cmp	ch, 0		; Start row 1? Maybe full screen
  1322 0000081F 7402                    	je	cls_maybe_fs
  1323 00000821 EB05                    	jmp	cls_not_fs
  1324                                  
  1325                                      cls_maybe_fs:
  1326                                  
  1327 00000823 80FE18                  	cmp	dh, 24		; End row 25? Full screen for sure
  1328 00000826 7412                    	je	cls_fs
  1329                                  
  1330                                      cls_not_fs:
  1331                                  
  1332 00000828 88E8                    	mov	al, ch		; Start row
  1333 0000082A FEC0                    	inc	al
  1334 0000082C E87707                  	call	puts_decimal_al
  1335 0000082F B03B                    	mov	al, ';'		; ANSI
  1336                                  	extended_putchar_al
    15 00000831 0F00                <1>  db 0x0f, 0x00
  1337 00000833 88F0                    	mov	al, dh		; End row
  1338 00000835 FEC0                    	inc	al
  1339 00000837 E86C07                  	call	puts_decimal_al
  1340                                  
  1341                                      cls_fs:
  1342                                  
  1343 0000083A B072                    	mov	al, 'r'		; Set scrolling window
  1344                                  	extended_putchar_al
    15 0000083C 0F00                <1>  db 0x0f, 0x00
  1345                                  
  1346 0000083E B01B                    	mov	al, 0x1B	; Escape
  1347                                  	extended_putchar_al
    15 00000840 0F00                <1>  db 0x0f, 0x00
  1348 00000842 B05B                    	mov	al, '['		; ANSI
  1349                                  	extended_putchar_al
    15 00000844 0F00                <1>  db 0x0f, 0x00
  1350                                  
  1351 00000846 80FB01                  	cmp	bl, 1
  1352 00000849 7504                    	jne	cls_fs_multiline
  1353                                  
  1354 0000084B B04D                    	mov	al, 'M'
  1355 0000084D EB07                    	jmp	cs_fs_ml_out
  1356                                  
  1357                                  cls_fs_multiline:
  1358                                  
  1359 0000084F 88D8                    	mov	al, bl		; Number of rows
  1360 00000851 E85207                  	call	puts_decimal_al
  1361 00000854 B053                    	mov	al, 'S'		; Scroll up
  1362                                  
  1363                                  cs_fs_ml_out:
  1364                                  
  1365                                  	extended_putchar_al
    15 00000856 0F00                <1>  db 0x0f, 0x00
  1366                                  
  1367 00000858 5B                      	pop	bx
  1368 00000859 58                      	pop	ax
  1369                                  
  1370                                  	; Update "actual" cursor position with expected value - different ANSI terminals do different things
  1371                                  	; to the cursor position when you scroll
  1372                                  
  1373 0000085A 50                      	push	ax
  1374 0000085B 53                      	push	bx
  1375 0000085C 52                      	push 	dx
  1376 0000085D 06                      	push	es
  1377                                  
  1378 0000085E B84000                  	mov	ax, 0x40
  1379 00000861 8EC0                    	mov	es, ax
  1380                                  
  1381 00000863 B402                    	mov	ah, 2
  1382 00000865 B700                    	mov	bh, 0
  1383 00000867 268A365100              	mov	dh, [es:curpos_y-bios_data]
  1384 0000086C 268A165000              	mov	dl, [es:curpos_x-bios_data]
  1385 00000871 CD10                    	int	10h
  1386                                  
  1387 00000873 07                      	pop	es
  1388 00000874 5A                      	pop	dx
  1389 00000875 5B                      	pop	bx
  1390 00000876 58                      	pop	ax
  1391                                  
  1392                                  int10_scroll_up_vmem_update:
  1393                                  
  1394                                  	; Now, we need to update video memory
  1395                                  
  1396 00000877 53                      	push	bx
  1397 00000878 50                      	push	ax
  1398                                  
  1399 00000879 1E                      	push	ds
  1400 0000087A 06                      	push	es
  1401 0000087B 51                      	push	cx
  1402 0000087C 52                      	push	dx
  1403 0000087D 56                      	push	si
  1404 0000087E 57                      	push	di
  1405                                  
  1406 0000087F 2EC606[8716]01          	mov	byte [cs:vram_dirty], 1
  1407                                  
  1408 00000885 53                      	push	bx
  1409                                  
  1410 00000886 BB00B8                  	mov	bx, 0xb800
  1411 00000889 8EC3                    	mov	es, bx
  1412 0000088B 8EDB                    	mov	ds, bx
  1413                                  
  1414 0000088D 5B                      	pop	bx
  1415 0000088E 88C3                    	mov	bl, al
  1416                                  
  1417                                      cls_vmem_scroll_up_next_line:
  1418                                  
  1419 00000890 80FB00                  	cmp	bl, 0
  1420 00000893 744C                    	je	cls_vmem_scroll_up_done
  1421                                  
  1422                                      cls_vmem_scroll_up_one:
  1423                                  
  1424 00000895 53                      	push	bx
  1425 00000896 52                      	push	dx
  1426                                  
  1427 00000897 B80000                  	mov	ax, 0
  1428 0000089A 88E8                    	mov	al, ch		; Start row number is now in AX
  1429 0000089C BB5000                  	mov	bx, 80
  1430 0000089F F7E3                    	mul	bx
  1431 000008A1 00C8                    	add	al, cl
  1432 000008A3 80D400                  	adc	ah, 0		; Character number is now in AX
  1433 000008A6 BB0200                  	mov	bx, 2
  1434 000008A9 F7E3                    	mul	bx		; Memory location is now in AX
  1435                                  
  1436 000008AB 5A                      	pop	dx
  1437 000008AC 5B                      	pop	bx
  1438                                  
  1439 000008AD 89C7                    	mov	di, ax
  1440 000008AF 89C6                    	mov	si, ax
  1441 000008B1 81C6A000                	add	si, 2*80	; In a moment we will copy CX words from DS:SI to ES:DI
  1442                                  
  1443 000008B5 B80000                  	mov	ax, 0
  1444 000008B8 00D0                    	add	al, dl
  1445 000008BA 80D400                  	adc	ah, 0
  1446 000008BD 40                      	inc	ax
  1447 000008BE 28C8                    	sub	al, cl
  1448 000008C0 80DC00                  	sbb	ah, 0		; AX now contains the number of characters from the row to copy
  1449                                  
  1450 000008C3 38F5                    	cmp	ch, dh
  1451 000008C5 730B                    	jae	cls_vmem_scroll_up_one_done
  1452                                  
  1453                                  vmem_scroll_up_copy_next_row:
  1454                                  
  1455 000008C7 51                      	push	cx
  1456 000008C8 89C1                    	mov	cx, ax		; CX is now the length (in words) of the row to copy
  1457 000008CA FC                      	cld
  1458 000008CB F3A5                    	rep	movsw		; Scroll the line up
  1459 000008CD 59                      	pop	cx
  1460                                  
  1461 000008CE FEC5                    	inc	ch		; Move onto the next row
  1462 000008D0 EBC3                    	jmp	cls_vmem_scroll_up_one
  1463                                  
  1464                                      cls_vmem_scroll_up_one_done:
  1465                                  
  1466 000008D2 51                      	push	cx
  1467 000008D3 89C1                    	mov	cx, ax		; CX is now the length (in words) of the row to copy
  1468 000008D5 88FC                    	mov	ah, bh		; Attribute for new line
  1469 000008D7 B000                    	mov	al, 0		; Write 0 to video memory for new characters
  1470 000008D9 FC                      	cld
  1471 000008DA F3AB                    	rep	stosw
  1472 000008DC 59                      	pop	cx
  1473                                  
  1474 000008DD FECB                    	dec	bl		; Scroll whole text block another line
  1475 000008DF EBAF                    	jmp	cls_vmem_scroll_up_next_line	
  1476                                  
  1477                                      cls_vmem_scroll_up_done:
  1478                                  
  1479                                  	;mov	al, 0x1B	; Escape
  1480                                  	;extended_putchar_al
  1481                                  	;mov	al, '['		; ANSI
  1482                                  	;extended_putchar_al
  1483                                  	;mov	al, '0'		; Reset attributes
  1484                                  	;extended_putchar_al
  1485                                  	;mov	al, 'm'
  1486                                  	;extended_putchar_al
  1487                                  
  1488 000008E1 5F                      	pop	di
  1489 000008E2 5E                      	pop	si
  1490 000008E3 5A                      	pop	dx
  1491 000008E4 59                      	pop	cx
  1492 000008E5 07                      	pop	es
  1493 000008E6 1F                      	pop	ds
  1494                                  
  1495 000008E7 58                      	pop	ax
  1496 000008E8 5B                      	pop	bx
  1497                                  
  1498 000008E9 CF                      	iret
  1499                                  	
  1500                                    int10_scrolldown:
  1501                                  
  1502 000008EA 53                      	push	bx
  1503 000008EB 51                      	push	cx
  1504 000008EC 55                      	push	bp
  1505 000008ED 50                      	push	ax
  1506                                  
  1507 000008EE 89DD                    	mov	bp, bx		; Convert from CGA to ANSI
  1508 000008F0 B10C                    	mov	cl, 12
  1509 000008F2 D3CD                    	ror	bp, cl
  1510 000008F4 83E507                  	and	bp, 7
  1511 000008F7 2E8A9E[5516]            	mov	bl, byte [cs:bp+colour_table]
  1512 000008FC 80C30A                  	add	bl, 10
  1513                                  
  1514 000008FF B01B                    	mov	al, 0x1B	; Escape
  1515                                  	extended_putchar_al
    15 00000901 0F00                <1>  db 0x0f, 0x00
  1516 00000903 B05B                    	mov	al, '['		; ANSI
  1517                                  	extended_putchar_al
    15 00000905 0F00                <1>  db 0x0f, 0x00
  1518 00000907 88D8                    	mov	al, bl		; Background colour
  1519 00000909 E89A06                  	call	puts_decimal_al
  1520 0000090C B06D                    	mov	al, 'm'		; Set cursor position command
  1521                                  	extended_putchar_al
    15 0000090E 0F00                <1>  db 0x0f, 0x00
  1522                                  
  1523 00000910 58                      	pop	ax
  1524 00000911 5D                      	pop	bp
  1525 00000912 59                      	pop	cx
  1526 00000913 5B                      	pop	bx
  1527                                  
  1528 00000914 3C00                    	cmp	al, 0 ; Clear window
  1529 00000916 7513                    	jne	cls_partial_down
  1530                                  
  1531 00000918 83F900                  	cmp	cx, 0 ; Start of screen
  1532 0000091B 750E                    	jne	cls_partial_down
  1533                                  
  1534 0000091D 80FA4F                  	cmp	dl, 0x4f ; Clearing columns 0-79
  1535 00000920 7509                    	jne	cls_partial_down
  1536                                  
  1537 00000922 80FE18                  	cmp	dh, 0x18 ; Clearing rows 0-24 (or more)
  1538 00000925 7C04                    	jl	cls_partial_down
  1539                                  
  1540 00000927 E82D07                  	call	clear_screen
  1541 0000092A CF                      	iret
  1542                                  
  1543                                    cls_partial_down:
  1544                                  
  1545 0000092B 50                      	push 	ax
  1546 0000092C 53                      	push	bx
  1547                                  
  1548 0000092D BB0000                  	mov	bx, 0
  1549 00000930 88C3                    	mov	bl, al		; Number of rows to scroll are now in bl
  1550                                  
  1551 00000932 80FB00                  	cmp	bl, 0		; Clear whole window?
  1552 00000935 7502                    	jne	cls_partial_down_whole
  1553                                  
  1554 00000937 B319                    	mov	bl, 25		; 25 rows
  1555                                  
  1556                                    cls_partial_down_whole:
  1557                                  
  1558 00000939 B01B                    	mov	al, 0x1B	; Escape
  1559                                  	extended_putchar_al
    15 0000093B 0F00                <1>  db 0x0f, 0x00
  1560 0000093D B05B                    	mov	al, '['		; ANSI
  1561                                  	extended_putchar_al
    15 0000093F 0F00                <1>  db 0x0f, 0x00
  1562                                  
  1563 00000941 80FD00                  	cmp	ch, 0		; Start row 1? Maybe full screen
  1564 00000944 7402                    	je	cls_maybe_fs_down
  1565 00000946 EB05                    	jmp	cls_not_fs_down
  1566                                  
  1567                                      cls_maybe_fs_down:
  1568                                  
  1569 00000948 80FE18                  	cmp	dh, 24		; End row 25? Full screen for sure
  1570 0000094B 7412                    	je	cls_fs_down
  1571                                  
  1572                                      cls_not_fs_down:
  1573                                  
  1574 0000094D 88E8                    	mov	al, ch		; Start row
  1575 0000094F FEC0                    	inc	al
  1576 00000951 E85206                  	call	puts_decimal_al
  1577 00000954 B03B                    	mov	al, ';'		; ANSI
  1578                                  	extended_putchar_al
    15 00000956 0F00                <1>  db 0x0f, 0x00
  1579 00000958 88F0                    	mov	al, dh		; End row
  1580 0000095A FEC0                    	inc	al
  1581 0000095C E84706                  	call	puts_decimal_al
  1582                                  
  1583                                      cls_fs_down:
  1584                                  
  1585 0000095F B072                    	mov	al, 'r'		; Set scrolling window
  1586                                  	extended_putchar_al
    15 00000961 0F00                <1>  db 0x0f, 0x00
  1587                                  
  1588 00000963 B01B                    	mov	al, 0x1B	; Escape
  1589                                  	extended_putchar_al
    15 00000965 0F00                <1>  db 0x0f, 0x00
  1590 00000967 B05B                    	mov	al, '['		; ANSI
  1591                                  	extended_putchar_al
    15 00000969 0F00                <1>  db 0x0f, 0x00
  1592                                  
  1593 0000096B 80FB01                  	cmp	bl, 1
  1594 0000096E 7504                    	jne	cls_fs_down_multiline
  1595                                  
  1596 00000970 B044                    	mov	al, 'D'
  1597 00000972 EB07                    	jmp	cs_fs_down_ml_out
  1598                                  
  1599                                      cls_fs_down_multiline:
  1600                                  
  1601 00000974 88D8                    	mov	al, bl		; Number of rows
  1602 00000976 E82D06                  	call	puts_decimal_al
  1603 00000979 B054                    	mov	al, 'T'		; Scroll down
  1604                                  
  1605                                      cs_fs_down_ml_out:
  1606                                  
  1607                                  	extended_putchar_al
    15 0000097B 0F00                <1>  db 0x0f, 0x00
  1608                                  
  1609                                  	; Update "actual" cursor position with expected value - different ANSI terminals do different things
  1610                                  	; to the cursor position when you scroll
  1611                                  
  1612 0000097D 5B                      	pop	bx
  1613 0000097E 58                      	pop	ax
  1614                                  
  1615 0000097F 50                      	push	ax
  1616 00000980 53                      	push	bx
  1617 00000981 52                      	push 	dx
  1618 00000982 06                      	push	es
  1619                                  
  1620 00000983 B84000                  	mov	ax, 0x40
  1621 00000986 8EC0                    	mov	es, ax
  1622                                  
  1623 00000988 B402                    	mov	ah, 2
  1624 0000098A B700                    	mov	bh, 0
  1625 0000098C 268A365100              	mov	dh, [es:curpos_y-bios_data]
  1626 00000991 268A165000              	mov	dl, [es:curpos_x-bios_data]
  1627 00000996 CD10                    	int	10h
  1628                                  
  1629 00000998 07                      	pop	es
  1630 00000999 5A                      	pop	dx
  1631 0000099A 5B                      	pop	bx
  1632 0000099B 58                      	pop	ax
  1633                                  
  1634                                  int10_scroll_down_vmem_update:
  1635                                  
  1636                                  	; Now, we need to update video memory
  1637                                  
  1638 0000099C 50                      	push	ax
  1639 0000099D 53                      	push	bx
  1640                                  
  1641 0000099E 1E                      	push	ds
  1642 0000099F 06                      	push	es
  1643 000009A0 51                      	push	cx
  1644 000009A1 52                      	push	dx
  1645 000009A2 56                      	push	si
  1646 000009A3 57                      	push	di
  1647                                  
  1648 000009A4 2EC606[8716]01          	mov	byte [cs:vram_dirty], 1
  1649                                  
  1650 000009AA 53                      	push	bx
  1651                                  
  1652 000009AB BB00B8                  	mov	bx, 0xb800
  1653 000009AE 8EC3                    	mov	es, bx
  1654 000009B0 8EDB                    	mov	ds, bx
  1655                                  
  1656 000009B2 5B                      	pop	bx
  1657 000009B3 88C3                    	mov	bl, al
  1658                                  
  1659                                      cls_vmem_scroll_down_next_line:
  1660                                  
  1661 000009B5 80FB00                  	cmp	bl, 0
  1662 000009B8 744A                    	je	cls_vmem_scroll_down_done
  1663                                  
  1664                                      cls_vmem_scroll_down_one:
  1665                                  
  1666 000009BA 53                      	push	bx
  1667 000009BB 52                      	push	dx
  1668                                  
  1669 000009BC B80000                  	mov	ax, 0
  1670 000009BF 88F0                    	mov	al, dh		; End row number is now in AX
  1671 000009C1 BB5000                  	mov	bx, 80
  1672 000009C4 F7E3                    	mul	bx
  1673 000009C6 00C8                    	add	al, cl
  1674 000009C8 80D400                  	adc	ah, 0		; Character number is now in AX
  1675 000009CB BB0200                  	mov	bx, 2
  1676 000009CE F7E3                    	mul	bx		; Memory location (start of final row) is now in AX
  1677                                  
  1678 000009D0 5A                      	pop	dx
  1679 000009D1 5B                      	pop	bx
  1680                                  
  1681 000009D2 89C7                    	mov	di, ax
  1682 000009D4 89C6                    	mov	si, ax
  1683 000009D6 81EEA000                	sub	si, 2*80	; In a moment we will copy CX words from DS:SI to ES:DI
  1684                                  
  1685 000009DA B80000                  	mov	ax, 0
  1686 000009DD 00D0                    	add	al, dl
  1687 000009DF 80D400                  	adc	ah, 0
  1688 000009E2 40                      	inc	ax
  1689 000009E3 28C8                    	sub	al, cl
  1690 000009E5 80DC00                  	sbb	ah, 0		; AX now contains the number of characters from the row to copy
  1691                                  
  1692 000009E8 38F5                    	cmp	ch, dh
  1693 000009EA 730A                    	jae	cls_vmem_scroll_down_one_done
  1694                                  
  1695 000009EC 51                      	push	cx
  1696 000009ED 89C1                    	mov	cx, ax		; CX is now the length (in words) of the row to copy
  1697 000009EF F3A5                    	rep	movsw		; Scroll the line down
  1698 000009F1 59                      	pop	cx
  1699                                  
  1700 000009F2 FECE                    	dec	dh		; Move onto the next row
  1701 000009F4 EBC4                    	jmp	cls_vmem_scroll_down_one
  1702                                  
  1703                                      cls_vmem_scroll_down_one_done:
  1704                                  
  1705 000009F6 51                      	push	cx
  1706 000009F7 89C1                    	mov	cx, ax		; CX is now the length (in words) of the row to copy
  1707 000009F9 88FC                    	mov	ah, bh		; Attribute for new line
  1708 000009FB B000                    	mov	al, 0		; Write 0 to video memory for new characters
  1709 000009FD F3AB                    	rep	stosw
  1710 000009FF 59                      	pop	cx
  1711                                  
  1712 00000A00 FECB                    	dec	bl		; Scroll whole text block another line
  1713 00000A02 EBB1                    	jmp	cls_vmem_scroll_down_next_line	
  1714                                  
  1715                                      cls_vmem_scroll_down_done:
  1716                                  
  1717 00000A04 5F                      	pop	di
  1718 00000A05 5E                      	pop	si
  1719 00000A06 5A                      	pop	dx
  1720 00000A07 59                      	pop	cx
  1721 00000A08 07                      	pop	es
  1722 00000A09 1F                      	pop	ds
  1723                                  
  1724                                  	;mov	al, 0x1B	; Escape
  1725                                  	;extended_putchar_al
  1726                                  	;mov	al, '['		; ANSI
  1727                                  	;extended_putchar_al
  1728                                  	;mov	al, '0'		; Reset attributes
  1729                                  	;extended_putchar_al
  1730                                  	;mov	al, 'm'
  1731                                  	;extended_putchar_al
  1732                                  
  1733 00000A0A 5B                      	pop	bx
  1734 00000A0B 58                      	pop	ax
  1735 00000A0C CF                      	iret
  1736                                  
  1737                                    int10_charatcur:
  1738                                  
  1739                                  	; This returns the character at the cursor. It is completely dysfunctional,
  1740                                  	; and only works at all if the character has previously been written following
  1741                                  	; an int 10/ah = 2 call to set the cursor position. Added just to support
  1742                                  	; GWBASIC.
  1743                                  
  1744 00000A0D 1E                      	push	ds
  1745 00000A0E 06                      	push	es
  1746 00000A0F 53                      	push	bx
  1747 00000A10 52                      	push	dx
  1748                                  
  1749 00000A11 BB4000                  	mov	bx, 0x40
  1750 00000A14 8EC3                    	mov	es, bx
  1751                                  
  1752 00000A16 BB00C0                  	mov	bx, 0xc000
  1753 00000A19 8EDB                    	mov	ds, bx
  1754                                  
  1755 00000A1B BBA000                  	mov	bx, 160
  1756 00000A1E B80000                  	mov	ax, 0
  1757 00000A21 26A05100                	mov	al, [es:curpos_y-bios_data]
  1758 00000A25 F7E3                    	mul	bx
  1759                                  
  1760 00000A27 BB0000                  	mov	bx, 0
  1761 00000A2A 268A1E5000              	mov	bl, [es:curpos_x-bios_data]
  1762 00000A2F 01D8                    	add	ax, bx
  1763 00000A31 01D8                    	add	ax, bx
  1764 00000A33 89C3                    	mov	bx, ax
  1765                                  
  1766 00000A35 B407                    	mov	ah, 7
  1767 00000A37 8A07                    	mov	al, [bx]
  1768                                  
  1769 00000A39 5A                      	pop	dx
  1770 00000A3A 5B                      	pop	bx
  1771 00000A3B 07                      	pop	es
  1772 00000A3C 1F                      	pop	ds
  1773                                  
  1774 00000A3D CF                      	iret
  1775                                  
  1776                                    i10_unsup:
  1777                                  
  1778 00000A3E CF                      	iret
  1779                                  
  1780                                    int10_write_char:
  1781                                  
  1782                                  	; First write the character to a buffer at C000:0. This is so that
  1783                                  	; we can later retrieve it using the get character at cursor function,
  1784                                  	; which GWBASIC uses.
  1785                                  
  1786 00000A3F 1E                      	push	ds
  1787 00000A40 06                      	push	es
  1788 00000A41 51                      	push	cx
  1789 00000A42 52                      	push	dx
  1790 00000A43 50                      	push	ax
  1791 00000A44 55                      	push	bp
  1792 00000A45 53                      	push	bx
  1793                                  
  1794 00000A46 50                      	push	ax
  1795                                  
  1796 00000A47 88C1                    	mov	cl, al
  1797 00000A49 B507                    	mov	ch, 7
  1798                                  
  1799 00000A4B BB4000                  	mov	bx, 0x40
  1800 00000A4E 8EC3                    	mov	es, bx
  1801                                  
  1802 00000A50 BB00C0                  	mov	bx, 0xc000
  1803 00000A53 8EDB                    	mov	ds, bx
  1804                                  
  1805 00000A55 BBA000                  	mov	bx, 160
  1806 00000A58 B80000                  	mov	ax, 0
  1807 00000A5B 26A05100                	mov	al, [es:curpos_y-bios_data]
  1808 00000A5F F7E3                    	mul	bx
  1809                                  
  1810 00000A61 BB0000                  	mov	bx, 0
  1811 00000A64 268A1E5000              	mov	bl, [es:curpos_x-bios_data]
  1812 00000A69 D1E3                    	shl	bx, 1
  1813 00000A6B 01C3                    	add	bx, ax
  1814                                  
  1815 00000A6D 890F                    	mov	[bx], cx
  1816                                  	
  1817 00000A6F 58                      	pop	ax
  1818 00000A70 50                      	push	ax
  1819                                  
  1820                                  	extended_putchar_al
    15 00000A71 0F00                <1>  db 0x0f, 0x00
  1821                                  
  1822 00000A73 E99F00                  	jmp	int10_write_char_skip_lines
  1823                                  
  1824                                    int10_write_char_attrib:
  1825                                  
  1826                                  	; First write the character to a buffer at C000:0. This is so that
  1827                                  	; we can later retrieve it using the get character at cursor function,
  1828                                  	; which GWBASIC uses.
  1829                                  
  1830 00000A76 1E                      	push	ds
  1831 00000A77 06                      	push	es
  1832 00000A78 51                      	push	cx
  1833 00000A79 52                      	push	dx
  1834 00000A7A 50                      	push	ax
  1835 00000A7B 55                      	push	bp
  1836 00000A7C 53                      	push	bx
  1837                                  
  1838 00000A7D 50                      	push	ax
  1839 00000A7E 51                      	push	cx
  1840                                  
  1841 00000A7F 88C1                    	mov	cl, al
  1842 00000A81 88DD                    	mov	ch, bl
  1843                                  
  1844 00000A83 BB4000                  	mov	bx, 0x40
  1845 00000A86 8EC3                    	mov	es, bx
  1846                                  
  1847 00000A88 BB00C0                  	mov	bx, 0xc000
  1848 00000A8B 8EDB                    	mov	ds, bx
  1849                                  
  1850 00000A8D BBA000                  	mov	bx, 160
  1851 00000A90 B80000                  	mov	ax, 0
  1852 00000A93 26A05100                	mov	al, [es:curpos_y-bios_data]
  1853 00000A97 F7E3                    	mul	bx
  1854                                  
  1855 00000A99 BB0000                  	mov	bx, 0
  1856 00000A9C 268A1E5000              	mov	bl, [es:curpos_x-bios_data]
  1857 00000AA1 D1E3                    	shl	bx, 1
  1858 00000AA3 01C3                    	add	bx, ax
  1859                                  
  1860 00000AA5 890F                    	mov	[bx], cx
  1861                                  
  1862 00000AA7 88EB                    	mov	bl, ch
  1863                                  
  1864 00000AA9 88DF                    	mov	bh, bl
  1865 00000AAB 80E307                  	and	bl, 7		; Foreground colour now in bl
  1866                                  
  1867 00000AAE 89DD                    	mov	bp, bx		; Convert from CGA to ANSI
  1868 00000AB0 81E5FF00                	and	bp, 0xff
  1869 00000AB4 2E8A9E[5516]            	mov	bl, byte [cs:bp+colour_table]
  1870                                  
  1871 00000AB9 80E708                  	and	bh, 8		; Bright attribute now in bh
  1872                                  cpu	186
  1873 00000ABC C0EF03                  	shr	bh, 3
  1874                                  cpu	8086
  1875                                  
  1876 00000ABF B01B                    	mov	al, 0x1B	; Escape
  1877                                  	extended_putchar_al
    15 00000AC1 0F00                <1>  db 0x0f, 0x00
  1878 00000AC3 B05B                    	mov	al, '['		; ANSI
  1879                                  	extended_putchar_al
    15 00000AC5 0F00                <1>  db 0x0f, 0x00
  1880 00000AC7 88F8                    	mov	al, bh		; Bright attribute
  1881 00000AC9 E8DA04                  	call	puts_decimal_al
  1882 00000ACC B03B                    	mov	al, ';'
  1883                                  	extended_putchar_al
    15 00000ACE 0F00                <1>  db 0x0f, 0x00
  1884 00000AD0 88D8                    	mov	al, bl		; Foreground colour
  1885 00000AD2 E8D104                  	call	puts_decimal_al
  1886                                  
  1887 00000AD5 88EB                    	mov	bl, ch
  1888                                  
  1889 00000AD7 88DF                    	mov	bh, bl
  1890                                  cpu	186
  1891 00000AD9 C0EB04                  	shr	bl, 4
  1892                                  cpu	8086
  1893 00000ADC 80E307                  	and	bl, 7		; Background colour now in bl
  1894                                  
  1895 00000ADF 89DD                    	mov	bp, bx		; Convert from CGA to ANSI
  1896 00000AE1 81E5FF00                	and	bp, 0xff
  1897 00000AE5 2E8A9E[5516]            	mov	bl, byte [cs:bp+colour_table]
  1898                                  
  1899 00000AEA 80C30A                  	add	bl, 10
  1900                                  	; rol	bh, 1
  1901                                  	; and	bh, 1		; Bright attribute now in bh (not used right now)
  1902                                  
  1903 00000AED B03B                    	mov	al, ';'
  1904                                  	extended_putchar_al
    15 00000AEF 0F00                <1>  db 0x0f, 0x00
  1905 00000AF1 88D8                    	mov	al, bl		; Background colour
  1906 00000AF3 E8B004                  	call	puts_decimal_al
  1907 00000AF6 B06D                    	mov	al, 'm'		; Set cursor position command
  1908                                  	extended_putchar_al
    15 00000AF8 0F00                <1>  db 0x0f, 0x00
  1909                                  	
  1910 00000AFA 59                      	pop	cx
  1911 00000AFB 58                      	pop	ax
  1912 00000AFC 50                      	push	ax
  1913                                  
  1914                                      out_another_char:
  1915                                  
  1916                                  	extended_putchar_al
    15 00000AFD 0F00                <1>  db 0x0f, 0x00
  1917 00000AFF 49                      	dec	cx
  1918 00000B00 83F900                  	cmp	cx, 0
  1919 00000B03 75F8                    	jne	out_another_char
  1920                                  
  1921 00000B05 B01B                    	mov	al, 0x1B	; Escape
  1922                                  	extended_putchar_al
    15 00000B07 0F00                <1>  db 0x0f, 0x00
  1923 00000B09 B05B                    	mov	al, '['		; ANSI
  1924                                  	extended_putchar_al
    15 00000B0B 0F00                <1>  db 0x0f, 0x00
  1925 00000B0D B030                    	mov	al, '0'		; Reset attributes
  1926                                  	extended_putchar_al
    15 00000B0F 0F00                <1>  db 0x0f, 0x00
  1927 00000B11 B06D                    	mov	al, 'm'
  1928                                  	extended_putchar_al
    15 00000B13 0F00                <1>  db 0x0f, 0x00
  1929                                  
  1930                                      int10_write_char_skip_lines:
  1931                                  
  1932 00000B15 58                      	pop	ax
  1933                                  
  1934 00000B16 06                      	push	es
  1935 00000B17 1F                      	pop	ds
  1936                                  
  1937 00000B18 3C08                    	cmp	al, 0x08
  1938 00000B1A 751B                    	jne	int10_write_char_attrib_inc_x
  1939                                  
  1940 00000B1C FE0E5000                	dec	byte [curpos_x-bios_data]
  1941 00000B20 FE0E9D00                	dec	byte [crt_curpos_x-bios_data]
  1942 00000B24 803E500000              	cmp	byte [curpos_x-bios_data], 0
  1943 00000B29 7F63                    	jg	int10_write_char_attrib_done
  1944                                  
  1945 00000B2B C606500000              	mov	byte [curpos_x-bios_data], 0
  1946 00000B30 C6069D0000              	mov	byte [crt_curpos_x-bios_data], 0
  1947 00000B35 EB57                    	jmp	int10_write_char_attrib_done
  1948                                  
  1949                                      int10_write_char_attrib_inc_x:
  1950                                  
  1951 00000B37 3C0A                    	cmp	al, 0x0A	; New line?
  1952 00000B39 7421                    	je	int10_write_char_attrib_newline
  1953                                  
  1954 00000B3B 3C0D                    	cmp	al, 0x0D	; Carriage return?
  1955 00000B3D 750C                    	jne	int10_write_char_attrib_not_cr
  1956                                  
  1957 00000B3F C606500000              	mov	byte [curpos_x-bios_data], 0
  1958 00000B44 C6069D0000              	mov	byte [crt_curpos_x-bios_data], 0
  1959 00000B49 EB43                    	jmp	int10_write_char_attrib_done
  1960                                  
  1961                                      int10_write_char_attrib_not_cr:
  1962                                  
  1963 00000B4B FE065000                	inc	byte [curpos_x-bios_data]
  1964 00000B4F FE069D00                	inc	byte [crt_curpos_x-bios_data]
  1965 00000B53 803E500050              	cmp	byte [curpos_x-bios_data], 80
  1966 00000B58 7D02                    	jge	int10_write_char_attrib_newline
  1967 00000B5A EB32                    	jmp	int10_write_char_attrib_done
  1968                                  
  1969                                      int10_write_char_attrib_newline:
  1970                                  
  1971 00000B5C C606500000              	mov	byte [curpos_x-bios_data], 0
  1972 00000B61 C6069D0000              	mov	byte [crt_curpos_x-bios_data], 0
  1973 00000B66 FE065100                	inc	byte [curpos_y-bios_data]
  1974 00000B6A FE069E00                	inc	byte [crt_curpos_y-bios_data]
  1975                                  
  1976 00000B6E 803E510019              	cmp	byte [curpos_y-bios_data], 25
  1977 00000B73 7219                    	jb	int10_write_char_attrib_done
  1978 00000B75 C606510018              	mov	byte [curpos_y-bios_data], 24
  1979 00000B7A C6069E0018              	mov	byte [crt_curpos_y-bios_data], 24
  1980                                  
  1981 00000B7F B707                    	mov	bh, 7
  1982 00000B81 B001                    	mov	al, 1
  1983 00000B83 B90000                  	mov	cx, 0
  1984 00000B86 BA4F18                  	mov	dx, 0x184f
  1985                                  
  1986 00000B89 9C                      	pushf
  1987 00000B8A 0E                      	push	cs
  1988 00000B8B E8E9FC                  	call	int10_scroll_up_vmem_update
  1989                                  
  1990                                      int10_write_char_attrib_done:
  1991                                  
  1992 00000B8E 5B                      	pop	bx
  1993 00000B8F 5D                      	pop	bp
  1994 00000B90 58                      	pop	ax
  1995 00000B91 5A                      	pop	dx
  1996 00000B92 59                      	pop	cx
  1997 00000B93 07                      	pop	es
  1998 00000B94 1F                      	pop	ds
  1999                                  
  2000 00000B95 CF                      	iret
  2001                                  
  2002                                    int10_get_vm:
  2003                                  
  2004 00000B96 06                      	push	es
  2005                                  
  2006 00000B97 B84000                  	mov	ax, 0x40
  2007 00000B9A 8EC0                    	mov	es, ax
  2008                                  
  2009 00000B9C B450                    	mov	ah, 80 ; Number of columns
  2010 00000B9E 26A04900                	mov	al, [es:vidmode-bios_data]
  2011 00000BA2 B700                    	mov	bh, 0
  2012                                  
  2013 00000BA4 07                      	pop	es
  2014                                  
  2015 00000BA5 CF                      	iret
  2016                                  
  2017                                    int10_features:
  2018                                  
  2019                                  	; Signify we have CGA display
  2020                                  
  2021                                  	; mov	al, 0x1a
  2022                                  	; mov	bx, 0x0202
  2023                                  	; iret
  2024                                  
  2025                                  ; ************************* INT 11h - get equipment list
  2026                                  
  2027                                  int11:	
  2028 00000BA6 2EA1[EA13]              	mov	ax, [cs:equip]
  2029 00000BAA CF                      	iret
  2030                                  
  2031                                  ; ************************* INT 12h - return memory size
  2032                                  
  2033                                  int12:	
  2034 00000BAB B88002                  	mov	ax, 0x280 ; 640K conventional memory
  2035 00000BAE CF                      	iret
  2036                                  
  2037                                  ; ************************* INT 13h handler - disk services
  2038                                  
  2039                                  int13:
  2040 00000BAF 80FC00                  	cmp	ah, 0x00 ; Reset disk
  2041 00000BB2 7462                    	je	int13_reset_disk
  2042 00000BB4 80FC01                  	cmp	ah, 0x01 ; Get last status
  2043 00000BB7 7460                    	je	int13_last_status
  2044                                  
  2045 00000BB9 80FA80                  	cmp	dl, 0x80 ; Hard disk being queried?
  2046 00000BBC 750D                    	jne	i13_diskok
  2047                                  
  2048                                  	; Now, need to check an HD is installed
  2049 00000BBE 2E833E[600F]02          	cmp	word [cs:num_disks], 2
  2050 00000BC4 7D05                    	jge	i13_diskok
  2051                                  
  2052                                  	; No HD, so return an error
  2053 00000BC6 B40F                    	mov	ah, 15 ; Report no such drive
  2054 00000BC8 E97E05                  	jmp	reach_stack_stc
  2055                                  
  2056                                    i13_diskok:
  2057                                  
  2058 00000BCB 80FC02                  	cmp	ah, 0x02 ; Read disk
  2059 00000BCE 7454                    	je	int13_read_disk
  2060 00000BD0 80FC03                  	cmp	ah, 0x03 ; Write disk
  2061 00000BD3 7503E9B500              	je	int13_write_disk
  2062 00000BD8 80FC04                  	cmp	ah, 0x04 ; Verify disk
  2063 00000BDB 7503E91001              	je	int13_verify
  2064 00000BE0 80FC05                  	cmp	ah, 0x05 ; Format track - does nothing here
  2065 00000BE3 7503E97F01              	je	int13_format
  2066 00000BE8 80FC08                  	cmp	ah, 0x08 ; Get drive parameters (hard disk)
  2067 00000BEB 7503E90501              	je	int13_getparams
  2068 00000BF0 80FC0C                  	cmp	ah, 0x0c ; Seek (hard disk)
  2069 00000BF3 7503E95501              	je	int13_seek
  2070 00000BF8 80FC10                  	cmp	ah, 0x10 ; Check if drive ready (hard disk)
  2071 00000BFB 7503E95201              	je	int13_hdready
  2072 00000C00 80FC15                  	cmp	ah, 0x15 ; Get disk type
  2073 00000C03 7503E96401              	je	int13_getdisktype
  2074 00000C08 80FC16                  	cmp	ah, 0x16 ; Detect disk change
  2075 00000C0B 7503E98401              	je	int13_diskchange
  2076                                  
  2077 00000C10 B401                    	mov	ah, 1 ; Invalid function
  2078 00000C12 E93405                  	jmp	reach_stack_stc
  2079                                  
  2080 00000C15 CF                      	iret
  2081                                  
  2082                                    int13_reset_disk:
  2083                                  
  2084 00000C16 E93905                  	jmp	reach_stack_clc
  2085                                  
  2086                                    int13_last_status:
  2087                                  
  2088 00000C19 2E8A26[1B14]            	mov	ah, [cs:disk_laststatus]
  2089 00000C1E 7402                    	je	ls_no_error
  2090                                  
  2091 00000C20 F9                      	stc
  2092 00000C21 CF                      	iret
  2093                                  
  2094                                      ls_no_error:
  2095                                  
  2096 00000C22 F8                      	clc
  2097 00000C23 CF                      	iret
  2098                                  
  2099                                    int13_read_disk:
  2100                                  
  2101 00000C24 52                      	push	dx
  2102                                  
  2103 00000C25 80FA00                  	cmp	dl, 0 ; Floppy 0
  2104 00000C28 740B                    	je	i_flop_rd
  2105 00000C2A 80FA80                  	cmp	dl, 0x80 ; HD
  2106 00000C2D 7415                    	je	i_hd_rd
  2107                                  
  2108 00000C2F 5A                      	pop	dx
  2109 00000C30 B401                    	mov	ah, 1
  2110 00000C32 E91405                  	jmp	reach_stack_stc
  2111                                  
  2112                                      i_flop_rd:
  2113                                  
  2114 00000C35 56                      	push	si
  2115 00000C36 55                      	push	bp
  2116                                  
  2117 00000C37 2E3A0E[390F]            	cmp	cl, [cs:int1e_spt]
  2118 00000C3C 7741                    	ja	rd_error
  2119                                  
  2120 00000C3E 5D                      	pop	bp
  2121 00000C3F 5E                      	pop	si
  2122                                  
  2123 00000C40 B201                    	mov	dl, 1		; Floppy disk file handle is stored at j[1] in emulator
  2124 00000C42 EB02                    	jmp	i_rd
  2125                                  
  2126                                      i_hd_rd:
  2127                                  
  2128 00000C44 B200                    	mov	dl, 0		; Hard disk file handle is stored at j[0] in emulator
  2129                                  
  2130                                      i_rd: 
  2131                                  
  2132 00000C46 56                      	push	si
  2133 00000C47 55                      	push	bp
  2134                                  
  2135                                  	; Convert head/cylinder/sector number to byte offset in disk image
  2136                                  
  2137 00000C48 E89F03                  	call	chs_to_abs
  2138                                  
  2139                                  	; Now, SI:BP contains the absolute sector offset of the block. We then multiply by 512 to get the offset into the disk image
  2140                                  
  2141 00000C4B B400                    	mov	ah, 0
  2142                                  	cpu	186
  2143 00000C4D C1E009                  	shl	ax, 9
  2144                                  	extended_read_disk
    23 00000C50 0F02                <1>  db 0x0f, 0x02
  2145 00000C52 C1E809                  	shr	ax, 9
  2146                                  	cpu	8086
  2147 00000C55 B402                    	mov	ah, 0x02	; Put read code back
  2148                                  
  2149 00000C57 3C00                    	cmp	al, 0
  2150 00000C59 7424                    	je	rd_error
  2151                                  
  2152                                  	; Read was successful. Now, check if we have read the boot sector. If so, we want to update
  2153                                  	; our internal table of sectors/track to match the disk format
  2154                                  
  2155 00000C5B 83FA01                  	cmp	dx, 1		; FDD?
  2156 00000C5E 751A                    	jne	rd_noerror
  2157 00000C60 83F901                  	cmp	cx, 1		; First sector?
  2158 00000C63 7515                    	jne	rd_noerror
  2159                                  
  2160 00000C65 50                      	push	ax
  2161                                  
  2162 00000C66 268A4718                	mov	al, [es:bx+24]	; Number of SPT in floppy disk BPB
  2163                                  
  2164                                  	; cmp	al, 0		; If disk is unformatted, do not update the table
  2165                                  	; jne	rd_update_spt
  2166 00000C6A 3C09                    	cmp	al, 9		; 9 SPT, i.e. 720K disk, so update the table
  2167 00000C6C 7407                    	je	rd_update_spt
  2168 00000C6E 3C12                    	cmp	al, 18
  2169 00000C70 7403                    	je	rd_update_spt	; 18 SPT, i.e. 1.44MB disk, so update the table
  2170                                  
  2171 00000C72 58                      	pop	ax
  2172                                  
  2173 00000C73 EB05                    	jmp	rd_noerror
  2174                                  
  2175                                      rd_update_spt:
  2176                                  
  2177 00000C75 2EA2[390F]              	mov	[cs:int1e_spt], al
  2178 00000C79 58                      	pop	ax
  2179                                  
  2180                                      rd_noerror:
  2181                                  
  2182 00000C7A F8                      	clc
  2183 00000C7B B400                    	mov	ah, 0 ; No error
  2184 00000C7D EB03                    	jmp	rd_finish
  2185                                  
  2186                                      rd_error:
  2187                                  
  2188 00000C7F F9                      	stc
  2189 00000C80 B404                    	mov	ah, 4 ; Sector not found
  2190                                  
  2191                                      rd_finish:
  2192                                  
  2193 00000C82 5D                      	pop	bp
  2194 00000C83 5E                      	pop	si
  2195 00000C84 5A                      	pop	dx
  2196                                  
  2197 00000C85 2E8826[1B14]            	mov	[cs:disk_laststatus], ah
  2198 00000C8A E9CE04                  	jmp	reach_stack_carry
  2199                                  
  2200                                    int13_write_disk:
  2201                                  
  2202 00000C8D 52                      	push	dx
  2203                                  
  2204 00000C8E 80FA00                  	cmp	dl, 0 ; Floppy 0
  2205 00000C91 740B                    	je	i_flop_wr
  2206 00000C93 80FA80                  	cmp	dl, 0x80 ; HD
  2207 00000C96 740A                    	je	i_hd_wr
  2208                                  
  2209 00000C98 5A                      	pop	dx
  2210 00000C99 B401                    	mov	ah, 1
  2211 00000C9B E9AB04                  	jmp	reach_stack_stc
  2212                                  
  2213                                      i_flop_wr:
  2214                                  
  2215 00000C9E B201                    	mov	dl, 1		; Floppy disk file handle is stored at j[1] in emulator
  2216 00000CA0 EB02                    	jmp	i_wr
  2217                                  
  2218                                      i_hd_wr:
  2219                                  
  2220 00000CA2 B200                    	mov	dl, 0		; Hard disk file handle is stored at j[0] in emulator
  2221                                  
  2222                                      i_wr:
  2223                                  
  2224 00000CA4 56                      	push	si
  2225 00000CA5 55                      	push	bp
  2226 00000CA6 51                      	push	cx
  2227 00000CA7 57                      	push	di
  2228                                  
  2229                                  	; Convert head/cylinder/sector number to byte offset in disk image
  2230                                  
  2231 00000CA8 E83F03                  	call	chs_to_abs
  2232                                  
  2233                                  	; Signal an error if we are trying to write beyond the end of the disk
  2234                                  	
  2235 00000CAB 80FA00                  	cmp	dl, 0 ; Hard disk?
  2236 00000CAE 751B                    	jne	wr_fine ; No - no need for disk sector valid check - NOTE: original submission was JNAE which caused write problems on floppy disk
  2237                                  
  2238                                  	; First, we add the number of sectors we are trying to write from the absolute
  2239                                  	; sector number returned by chs_to_abs. We need to have at least this many
  2240                                  	; sectors on the disk, otherwise return a sector not found error.
  2241                                  
  2242 00000CB0 89E9                    	mov	cx, bp
  2243 00000CB2 89F7                    	mov	di, si
  2244                                  
  2245 00000CB4 B400                    	mov	ah, 0
  2246 00000CB6 01C1                    	add	cx, ax
  2247 00000CB8 83D700                  	adc	di, 0
  2248                                  
  2249 00000CBB 2E3B3E[620F]            	cmp	di, [cs:hd_secs_hi]
  2250 00000CC0 771E                    	ja	wr_error
  2251 00000CC2 7207                    	jb	wr_fine
  2252 00000CC4 2E3B0E[640F]            	cmp	cx, [cs:hd_secs_lo]
  2253 00000CC9 7715                    	ja	wr_error
  2254                                  
  2255                                  wr_fine:
  2256                                  
  2257 00000CCB B400                    	mov	ah, 0
  2258                                  	cpu	186
  2259 00000CCD C1E009                  	shl	ax, 9
  2260                                  	extended_write_disk
    27 00000CD0 0F03                <1>  db 0x0f, 0x03
  2261 00000CD2 C1E809                  	shr	ax, 9
  2262                                  	cpu	8086
  2263 00000CD5 B403                    	mov	ah, 0x03	; Put write code back
  2264                                  
  2265 00000CD7 3C00                    	cmp	al, 0
  2266 00000CD9 7405                    	je	wr_error
  2267                                  
  2268 00000CDB F8                      	clc
  2269 00000CDC B400                    	mov	ah, 0 ; No error
  2270 00000CDE EB03                    	jmp	wr_finish
  2271                                  
  2272                                      wr_error:
  2273                                  
  2274 00000CE0 F9                      	stc
  2275 00000CE1 B404                    	mov	ah, 4 ; Sector not found
  2276                                  
  2277                                      wr_finish:
  2278                                  
  2279 00000CE3 5F                      	pop	di
  2280 00000CE4 59                      	pop	cx
  2281 00000CE5 5D                      	pop	bp
  2282 00000CE6 5E                      	pop	si
  2283 00000CE7 5A                      	pop	dx
  2284                                  
  2285 00000CE8 2E8826[1B14]            	mov	[cs:disk_laststatus], ah
  2286 00000CED E96B04                  	jmp	reach_stack_carry
  2287                                  
  2288                                    int13_verify:
  2289                                  
  2290 00000CF0 B400                    	mov	ah, 0
  2291 00000CF2 E95D04                  	jmp	reach_stack_clc
  2292                                  
  2293                                    int13_getparams:
  2294                                  
  2295 00000CF5 80FA00                  	cmp 	dl, 0
  2296 00000CF8 740F                    	je	i_gp_fl
  2297 00000CFA 80FA80                  	cmp	dl, 0x80
  2298 00000CFD 7428                    	je	i_gp_hd
  2299                                  
  2300 00000CFF B401                    	mov	ah, 0x01
  2301 00000D01 2E8826[1B14]            	mov	[cs:disk_laststatus], ah
  2302 00000D06 E94004                  	jmp	reach_stack_stc
  2303                                  
  2304                                      i_gp_fl:
  2305                                  
  2306 00000D09 0E                      	push	cs
  2307 00000D0A 07                      	pop	es
  2308 00000D0B BF[350F]                	mov	di, int1e	; ES:DI now points to floppy parameters table (INT 1E)
  2309                                  
  2310 00000D0E B80000                  	mov	ax, 0
  2311 00000D11 BB0400                  	mov	bx, 4
  2312 00000D14 B54F                    	mov	ch, 0x4f
  2313 00000D16 2E8A0E[390F]            	mov	cl, [cs:int1e_spt]
  2314 00000D1B BA0101                  	mov	dx, 0x0101
  2315                                  
  2316 00000D1E 2EC606[1B14]00          	mov	byte [cs:disk_laststatus], 0
  2317 00000D24 E92B04                  	jmp	reach_stack_clc
  2318                                  
  2319                                      i_gp_hd:
  2320                                  
  2321 00000D27 B80000                  	mov	ax, 0
  2322 00000D2A BB0000                  	mov	bx, 0
  2323 00000D2D B201                    	mov	dl, 1
  2324 00000D2F 2E8A36[6A0F]            	mov	dh, [cs:hd_max_head]
  2325 00000D34 2E8B0E[680F]            	mov	cx, [cs:hd_max_track]
  2326 00000D39 D0CD                    	ror	ch, 1
  2327 00000D3B D0CD                    	ror	ch, 1
  2328 00000D3D 2E022E[660F]            	add	ch, [cs:hd_max_sector]
  2329 00000D42 86CD                    	xchg	ch, cl
  2330                                  
  2331 00000D44 2EC606[1B14]00          	mov	byte [cs:disk_laststatus], 0
  2332 00000D4A E90504                  	jmp	reach_stack_clc
  2333                                  
  2334                                    int13_seek:
  2335                                  
  2336 00000D4D B400                    	mov	ah, 0
  2337 00000D4F E90004                  	jmp	reach_stack_clc
  2338                                  
  2339                                    int13_hdready:
  2340                                  
  2341 00000D52 2E803E[600F]02          	cmp	byte [cs:num_disks], 2	; HD present?
  2342 00000D58 750A                    	jne	int13_hdready_nohd
  2343 00000D5A 80FA80                  	cmp	dl, 0x80		; Checking first HD?
  2344 00000D5D 7505                    	jne	int13_hdready_nohd
  2345                                  
  2346 00000D5F B400                    	mov	ah, 0
  2347 00000D61 E9EE03                  	jmp	reach_stack_clc
  2348                                  
  2349                                      int13_hdready_nohd:
  2350                                  
  2351 00000D64 E9E203                  	jmp	reach_stack_stc
  2352                                  
  2353                                    int13_format:
  2354                                  
  2355 00000D67 B400                    	mov	ah, 0
  2356 00000D69 E9E603                  	jmp	reach_stack_clc
  2357                                  
  2358                                    int13_getdisktype:
  2359                                  
  2360 00000D6C 80FA00                  	cmp	dl, 0 ; Floppy
  2361 00000D6F 740F                    	je	gdt_flop
  2362 00000D71 80FA80                  	cmp	dl, 0x80 ; HD
  2363 00000D74 740F                    	je	gdt_hd
  2364                                  
  2365 00000D76 B40F                    	mov	ah, 15 ; Report no such drive
  2366 00000D78 2E8826[1B14]            	mov	[cs:disk_laststatus], ah
  2367 00000D7D E9C903                  	jmp	reach_stack_stc
  2368                                  
  2369                                      gdt_flop:
  2370                                  
  2371 00000D80 B401                    	mov	ah, 1
  2372 00000D82 E9CD03                  	jmp	reach_stack_clc
  2373                                  
  2374                                      gdt_hd:
  2375                                  
  2376 00000D85 B403                    	mov	ah, 3
  2377 00000D87 2E8B0E[620F]            	mov	cx, [cs:hd_secs_hi]
  2378 00000D8C 2E8B16[640F]            	mov	dx, [cs:hd_secs_lo]
  2379 00000D91 E9BE03                  	jmp	reach_stack_clc
  2380                                  
  2381                                    int13_diskchange:
  2382                                  
  2383 00000D94 B400                    	mov	ah, 0 ; Disk not changed
  2384 00000D96 E9B903                  	jmp	reach_stack_clc
  2385                                  
  2386                                  ; ************************* INT 14h - serial port functions
  2387                                  
  2388                                  int14:
  2389 00000D99 80FC00                  	cmp	ah, 0
  2390 00000D9C 7403                    	je	int14_init
  2391                                  
  2392 00000D9E E9A803                  	jmp	reach_stack_stc
  2393                                  
  2394                                    int14_init:
  2395                                  
  2396 00000DA1 B80000                  	mov	ax, 0
  2397 00000DA4 E9A203                  	jmp	reach_stack_stc
  2398                                  
  2399                                  ; ************************* INT 15h - get system configuration
  2400                                  
  2401                                  int15:	; Here we do not support any of the functions, and just return
  2402                                  	; a function not supported code - like the original IBM PC/XT does.
  2403                                  
  2404                                  	; cmp	ah, 0xc0
  2405                                  	; je	int15_sysconfig
  2406                                  	; cmp	ah, 0x41
  2407                                  	; je	int15_waitevent
  2408                                  	; cmp	ah, 0x4f
  2409                                  	; je	int15_intercept
  2410                                  	; cmp	ah, 0x88
  2411                                  	; je	int15_getextmem
  2412                                  
  2413                                  ; Otherwise, function not supported
  2414                                  
  2415 00000DA7 B486                    	mov	ah, 0x86
  2416                                  
  2417 00000DA9 E99D03                  	jmp	reach_stack_stc
  2418                                  
  2419                                  ;  int15_sysconfig: ; Return address of system configuration table in ROM
  2420                                  ;
  2421                                  ;	mov	bx, 0xf000
  2422                                  ;	mov	es, bx
  2423                                  ;	mov	bx, rom_config
  2424                                  ;	mov	ah, 0
  2425                                  ;
  2426                                  ;	jmp	reach_stack_clc
  2427                                  ;
  2428                                  ;  int15_waitevent: ; Events not supported
  2429                                  ;
  2430                                  ;	mov	ah, 0x86
  2431                                  ;
  2432                                  ;	jmp	reach_stack_stc
  2433                                  ;
  2434                                  ;  int15_intercept: ; Keyboard intercept
  2435                                  ;
  2436                                  ;	jmp	reach_stack_stc
  2437                                  ;
  2438                                  ;  int15_getextmem: ; Extended memory not supported
  2439                                  ;
  2440                                  ;	mov	ah,0x86
  2441                                  ;
  2442                                  ;	jmp	reach_stack_stc
  2443                                  
  2444                                  ; ************************* INT 16h handler - keyboard
  2445                                  
  2446                                  int16:
  2447 00000DAC 80FC00                  	cmp	ah, 0x00 ; Get keystroke (remove from buffer)
  2448 00000DAF 7410                    	je	kb_getkey
  2449 00000DB1 80FC01                  	cmp	ah, 0x01 ; Check for keystroke (do not remove from buffer)
  2450 00000DB4 7439                    	je	kb_checkkey
  2451 00000DB6 80FC02                  	cmp	ah, 0x02 ; Check shift flags
  2452 00000DB9 7458                    	je	kb_shiftflags
  2453 00000DBB 80FC12                  	cmp	ah, 0x12 ; Check shift flags
  2454 00000DBE 7461                    	je	kb_extshiftflags
  2455                                  
  2456 00000DC0 CF                      	iret
  2457                                  
  2458                                    kb_getkey:
  2459                                  	
  2460 00000DC1 06                      	push	es
  2461 00000DC2 53                      	push	bx
  2462 00000DC3 51                      	push	cx
  2463 00000DC4 52                      	push	dx
  2464                                  
  2465 00000DC5 BB4000                  	mov	bx, 0x40
  2466 00000DC8 8EC3                    	mov	es, bx
  2467                                  
  2468                                      kb_gkblock:
  2469                                  
  2470 00000DCA FA                      	cli
  2471                                  
  2472 00000DCB 268B0E1C00              	mov	cx, [es:kbbuf_tail-bios_data]
  2473 00000DD0 268B1E1A00              	mov	bx, [es:kbbuf_head-bios_data]
  2474 00000DD5 268B17                  	mov	dx, [es:bx]
  2475                                  
  2476 00000DD8 FB                      	sti
  2477                                  
  2478                                  	; Wait until there is a key in the buffer
  2479 00000DD9 39D9                    	cmp	cx, bx
  2480 00000DDB 74ED                    	je	kb_gkblock
  2481                                  
  2482 00000DDD 2683061A0002            	add	word [es:kbbuf_head-bios_data], 2
  2483 00000DE3 E8D501                  	call	kb_adjust_buf
  2484                                  
  2485 00000DE6 88F4                    	mov	ah, dh
  2486 00000DE8 88D0                    	mov	al, dl
  2487                                  
  2488 00000DEA 5A                      	pop	dx
  2489 00000DEB 59                      	pop	cx
  2490 00000DEC 5B                      	pop	bx
  2491 00000DED 07                      	pop	es	
  2492                                  
  2493 00000DEE CF                      	iret
  2494                                  
  2495                                    kb_checkkey:
  2496                                  
  2497 00000DEF 06                      	push	es
  2498 00000DF0 53                      	push	bx
  2499 00000DF1 51                      	push	cx
  2500 00000DF2 52                      	push	dx
  2501                                  
  2502 00000DF3 BB4000                  	mov	bx, 0x40
  2503 00000DF6 8EC3                    	mov	es, bx
  2504                                  
  2505 00000DF8 268B0E1C00              	mov	cx, [es:kbbuf_tail-bios_data]
  2506 00000DFD 268B1E1A00              	mov	bx, [es:kbbuf_head-bios_data]
  2507 00000E02 268B17                  	mov	dx, [es:bx]
  2508                                  
  2509 00000E05 FB                      	sti
  2510                                  
  2511                                  	; Check if there is a key in the buffer. ZF is set if there is none.
  2512 00000E06 39D9                    	cmp	cx, bx
  2513                                  
  2514 00000E08 88F4                    	mov	ah, dh
  2515 00000E0A 88D0                    	mov	al, dl
  2516                                  
  2517 00000E0C 5A                      	pop	dx
  2518 00000E0D 59                      	pop	cx
  2519 00000E0E 5B                      	pop	bx
  2520 00000E0F 07                      	pop	es
  2521                                  
  2522 00000E10 CA0200                  	retf	2	; NEED TO FIX THIS!!
  2523                                  
  2524                                      kb_shiftflags:
  2525                                  
  2526 00000E13 06                      	push	es
  2527 00000E14 53                      	push	bx
  2528                                  
  2529 00000E15 BB4000                  	mov	bx, 0x40
  2530 00000E18 8EC3                    	mov	es, bx
  2531                                  
  2532 00000E1A 26A01700                	mov	al, [es:keyflags1-bios_data]
  2533                                  
  2534 00000E1E 5B                      	pop	bx
  2535 00000E1F 07                      	pop	es
  2536                                  
  2537 00000E20 CF                      	iret
  2538                                  
  2539                                      kb_extshiftflags:
  2540                                  
  2541 00000E21 06                      	push	es
  2542 00000E22 53                      	push	bx
  2543                                  
  2544 00000E23 BB4000                  	mov	bx, 0x40
  2545 00000E26 8EC3                    	mov	es, bx
  2546                                  
  2547 00000E28 26A01700                	mov	al, [es:keyflags1-bios_data]
  2548 00000E2C 88C4                    	mov	ah, al
  2549                                  
  2550 00000E2E 5B                      	pop	bx
  2551 00000E2F 07                      	pop	es
  2552                                  
  2553 00000E30 CF                      	iret
  2554                                  
  2555                                  ; ************************* INT 17h handler - printer
  2556                                  
  2557                                  int17:
  2558 00000E31 80FC01                  	cmp	ah, 0x01
  2559 00000E34 7403                    	je	int17_initprint ; Initialise printer
  2560                                  
  2561 00000E36 E91003                  	jmp	reach_stack_stc
  2562                                  
  2563                                    int17_initprint:
  2564                                  
  2565 00000E39 B401                    	mov	ah, 1 ; No printer
  2566 00000E3B E90B03                  	jmp	reach_stack_stc
  2567                                  
  2568                                  ; ************************* INT 19h = reboot
  2569                                  
  2570                                  int19:
  2571 00000E3E E902F3                  	jmp	boot
  2572                                  
  2573                                  ; ************************* INT 1Ah - clock
  2574                                  
  2575                                  int1a:
  2576 00000E41 80FC00                  	cmp	ah, 0
  2577 00000E44 7416                    	je	int1a_getsystime ; Get ticks since midnight (used for RTC time)
  2578 00000E46 80FC02                  	cmp	ah, 2
  2579 00000E49 7470                    	je	int1a_gettime ; Get RTC time (not actually used by DOS)
  2580 00000E4B 80FC04                  	cmp	ah, 4
  2581 00000E4E 7503E9A400              	je	int1a_getdate ; Get RTC date
  2582 00000E53 80FC0F                  	cmp	ah, 0x0f
  2583 00000E56 7503E9D600              	je	int1a_init    ; Initialise RTC
  2584                                  
  2585 00000E5B CF                      	iret
  2586                                  
  2587                                    int1a_getsystime:
  2588                                  
  2589 00000E5C 50                      	push	ax
  2590 00000E5D 53                      	push	bx
  2591 00000E5E 1E                      	push	ds
  2592 00000E5F 06                      	push	es
  2593                                  
  2594 00000E60 0E                      	push	cs
  2595 00000E61 0E                      	push	cs
  2596 00000E62 1F                      	pop	ds
  2597 00000E63 07                      	pop	es
  2598                                  
  2599 00000E64 BB[F11D]                	mov	bx, timetable
  2600                                  
  2601                                  	extended_get_rtc
    19 00000E67 0F01                <1>  db 0x0f, 0x01
  2602                                  
  2603 00000E69 B8B600                  	mov	ax, 182  ; Clock ticks in 10 seconds
  2604 00000E6C F726[151E]              	mul	word [tm_msec]
  2605 00000E70 BB1027                  	mov	bx, 10000
  2606 00000E73 F7F3                    	div	bx ; AX now contains clock ticks in milliseconds counter
  2607 00000E75 A3[151E]                	mov	[tm_msec], ax
  2608                                  
  2609 00000E78 B8B600                  	mov	ax, 182  ; Clock ticks in 10 seconds
  2610 00000E7B F726[F11D]              	mul	word [tm_sec]
  2611 00000E7F BB0A00                  	mov	bx, 10
  2612 00000E82 BA0000                  	mov	dx, 0
  2613 00000E85 F7F3                    	div	bx ; AX now contains clock ticks in seconds counter
  2614 00000E87 A3[F11D]                	mov	[tm_sec], ax
  2615                                  
  2616 00000E8A B84404                  	mov	ax, 1092 ; Clock ticks in a minute
  2617 00000E8D F726[F51D]              	mul	word [tm_min] ; AX now contains clock ticks in minutes counter
  2618 00000E91 A3[F51D]                	mov	[tm_min], ax
  2619                                  	
  2620 00000E94 B8F0FF                  	mov	ax, 65520 ; Clock ticks in an hour
  2621 00000E97 F726[F91D]              	mul	word [tm_hour] ; DX:AX now contains clock ticks in hours counter
  2622                                  
  2623 00000E9B 0306[151E]              	add	ax, [tm_msec] ; Add milliseconds in to AX
  2624 00000E9F 83D200                  	adc	dx, 0 ; Carry into DX if necessary
  2625 00000EA2 0306[F11D]              	add	ax, [tm_sec] ; Add seconds in to AX
  2626 00000EA6 83D200                  	adc	dx, 0 ; Carry into DX if necessary
  2627 00000EA9 0306[F51D]              	add	ax, [tm_min] ; Add minutes in to AX
  2628 00000EAD 83D200                  	adc	dx, 0 ; Carry into DX if necessary
  2629                                  
  2630 00000EB0 52                      	push	dx
  2631 00000EB1 50                      	push	ax
  2632 00000EB2 5A                      	pop	dx
  2633 00000EB3 59                      	pop	cx
  2634                                  
  2635 00000EB4 07                      	pop	es
  2636 00000EB5 1F                      	pop	ds
  2637 00000EB6 5B                      	pop	bx
  2638 00000EB7 58                      	pop	ax
  2639                                  
  2640 00000EB8 B000                    	mov	al, 0
  2641 00000EBA CF                      	iret
  2642                                  
  2643                                    int1a_gettime:
  2644                                  
  2645                                  	; Return the system time in BCD format. DOS doesn't use this, but we need to return
  2646                                  	; something or the system thinks there is no RTC.
  2647                                  
  2648 00000EBB 1E                      	push	ds
  2649 00000EBC 06                      	push	es
  2650 00000EBD 50                      	push	ax
  2651 00000EBE 53                      	push	bx
  2652                                  
  2653 00000EBF 0E                      	push	cs
  2654 00000EC0 0E                      	push	cs
  2655 00000EC1 1F                      	pop	ds
  2656 00000EC2 07                      	pop	es
  2657                                  
  2658 00000EC3 BB[F11D]                	mov	bx, timetable
  2659                                  
  2660                                  	extended_get_rtc
    19 00000EC6 0F01                <1>  db 0x0f, 0x01
  2661                                  
  2662 00000EC8 B80000                  	mov	ax, 0
  2663 00000ECB 8B0E[F91D]              	mov	cx, [tm_hour]
  2664 00000ECF E8A500                  	call	hex_to_bcd
  2665 00000ED2 88C7                    	mov	bh, al		; Hour in BCD is in BH
  2666                                  
  2667 00000ED4 B80000                  	mov	ax, 0
  2668 00000ED7 8B0E[F51D]              	mov	cx, [tm_min]
  2669 00000EDB E89900                  	call	hex_to_bcd
  2670 00000EDE 88C3                    	mov	bl, al		; Minute in BCD is in BL
  2671                                  
  2672 00000EE0 B80000                  	mov	ax, 0
  2673 00000EE3 8B0E[F11D]              	mov	cx, [tm_sec]
  2674 00000EE7 E88D00                  	call	hex_to_bcd
  2675 00000EEA 88C6                    	mov	dh, al		; Second in BCD is in DH
  2676                                  
  2677 00000EEC B200                    	mov	dl, 0		; Daylight saving flag = 0 always
  2678                                  
  2679 00000EEE 89D9                    	mov	cx, bx		; Hour:minute now in CH:CL
  2680                                  
  2681 00000EF0 5B                      	pop	bx
  2682 00000EF1 58                      	pop	ax
  2683 00000EF2 07                      	pop	es
  2684 00000EF3 1F                      	pop	ds
  2685                                  
  2686 00000EF4 E95B02                  	jmp	reach_stack_clc
  2687                                  
  2688                                    int1a_getdate:
  2689                                  
  2690                                  	; Return the system date in BCD format.
  2691                                  
  2692 00000EF7 1E                      	push	ds
  2693 00000EF8 06                      	push	es
  2694 00000EF9 53                      	push	bx
  2695 00000EFA 50                      	push	ax
  2696                                  
  2697 00000EFB 0E                      	push	cs
  2698 00000EFC 0E                      	push	cs
  2699 00000EFD 1F                      	pop	ds
  2700 00000EFE 07                      	pop	es
  2701                                  
  2702 00000EFF BB[F11D]                	mov	bx, timetable
  2703                                  
  2704                                  	extended_get_rtc
    19 00000F02 0F01                <1>  db 0x0f, 0x01
  2705                                  
  2706 00000F04 B80019                  	mov	ax, 0x1900
  2707 00000F07 8B0E[051E]              	mov	cx, [tm_year]
  2708 00000F0B E86900                  	call	hex_to_bcd
  2709 00000F0E 89C1                    	mov	cx, ax
  2710 00000F10 51                      	push	cx
  2711                                  
  2712 00000F11 B80100                  	mov	ax, 1
  2713 00000F14 8B0E[011E]              	mov	cx, [tm_mon]
  2714 00000F18 E85C00                  	call	hex_to_bcd
  2715 00000F1B 88C6                    	mov	dh, al
  2716                                  
  2717 00000F1D B80000                  	mov	ax, 0
  2718 00000F20 8B0E[FD1D]              	mov	cx, [tm_mday]
  2719 00000F24 E85000                  	call	hex_to_bcd
  2720 00000F27 88C2                    	mov	dl, al
  2721                                  
  2722 00000F29 59                      	pop	cx
  2723 00000F2A 58                      	pop	ax
  2724 00000F2B 5B                      	pop	bx
  2725 00000F2C 07                      	pop	es
  2726 00000F2D 1F                      	pop	ds
  2727                                  
  2728 00000F2E E92102                  	jmp	reach_stack_clc
  2729                                  
  2730                                    int1a_init:
  2731                                  
  2732 00000F31 E91E02                  	jmp	reach_stack_clc
  2733                                  
  2734                                  ; ************************* INT 1Ch - the other timer interrupt
  2735                                  
  2736                                  int1c:
  2737                                  
  2738 00000F34 CF                      	iret
  2739                                  
  2740                                  ; ************************* INT 1Eh - diskette parameter table
  2741                                  
  2742                                  int1e:
  2743                                  
  2744 00000F35 DF                      		db 0xdf ; Step rate 2ms, head unload time 240ms
  2745 00000F36 02                      		db 0x02 ; Head load time 4 ms, non-DMA mode 0
  2746 00000F37 25                      		db 0x25 ; Byte delay until motor turned off
  2747 00000F38 02                      		db 0x02 ; 512 bytes per sector
  2748 00000F39 12                      int1e_spt	db 18	; 18 sectors per track (1.44MB)
  2749 00000F3A 1B                      		db 0x1B ; Gap between sectors for 3.5" floppy
  2750 00000F3B FF                      		db 0xFF ; Data length (ignored)
  2751 00000F3C 54                      		db 0x54 ; Gap length when formatting
  2752 00000F3D F6                      		db 0xF6 ; Format filler byte
  2753 00000F3E 0F                      		db 0x0F ; Head settle time (1 ms)
  2754 00000F3F 08                      		db 0x08 ; Motor start time in 1/8 seconds
  2755                                  
  2756                                  ; ************************* INT 41h - hard disk parameter table
  2757                                  
  2758                                  int41:
  2759                                  
  2760 00000F40 0000                    int41_max_cyls	dw 0
  2761 00000F42 00                      int41_max_heads	db 0
  2762 00000F43 0000                    		dw 0
  2763 00000F45 0000                    		dw 0
  2764 00000F47 00                      		db 0
  2765 00000F48 C0                      		db 11000000b
  2766 00000F49 00                      		db 0
  2767 00000F4A 00                      		db 0
  2768 00000F4B 00                      		db 0
  2769 00000F4C 0000                    		dw 0
  2770 00000F4E 00                      int41_max_sect	db 0
  2771 00000F4F 00                      		db 0
  2772                                  
  2773                                  ; ************************* ROM configuration table
  2774                                  
  2775 00000F50 1000                    rom_config	dw 16		; 16 bytes following
  2776 00000F52 FE                      		db 0xfe		; Model
  2777 00000F53 41                      		db 'A'		; Submodel
  2778 00000F54 43                      		db 'C'		; BIOS revision
  2779 00000F55 20                      		db 0b00100000   ; Feature 1
  2780 00000F56 00                      		db 0b00000000   ; Feature 2
  2781 00000F57 00                      		db 0b00000000   ; Feature 3
  2782 00000F58 00                      		db 0b00000000   ; Feature 4
  2783 00000F59 00                      		db 0b00000000   ; Feature 5
  2784 00000F5A 000000000000            		db 0, 0, 0, 0, 0, 0
  2785                                  
  2786                                  ; Internal state variables
  2787                                  
  2788 00000F60 0000                    num_disks	dw 0	; Number of disks present
  2789 00000F62 0000                    hd_secs_hi	dw 0	; Total sectors on HD (high word)
  2790 00000F64 0000                    hd_secs_lo	dw 0	; Total sectors on HD (low word)
  2791 00000F66 0000                    hd_max_sector	dw 0	; Max sector number on HD
  2792 00000F68 0000                    hd_max_track	dw 0	; Max track number on HD
  2793 00000F6A 0000                    hd_max_head	dw 0	; Max head number on HD
  2794 00000F6C 0000                    drive_tracks_temp dw 0
  2795 00000F6E 0000                    drive_sectors_temp dw 0
  2796 00000F70 0000                    drive_heads_temp  dw 0
  2797 00000F72 0000                    drive_num_temp    dw 0
  2798 00000F74 00                      boot_state	db 0
  2799 00000F75 00                      cga_refresh_reg	db 0
  2800                                  
  2801                                  ; Default interrupt handlers
  2802                                  
  2803                                  int0:
  2804                                  int1:
  2805                                  int2:
  2806                                  int3:
  2807                                  int4:
  2808                                  int5:
  2809                                  int6:
  2810                                  intb:
  2811                                  intc:
  2812                                  intd:
  2813                                  inte:
  2814                                  intf:
  2815                                  int18:
  2816                                  int1b:
  2817                                  int1d:
  2818                                  
  2819 00000F76 CF                      iret
  2820                                  
  2821                                  ; ************ Function call library ************
  2822                                  
  2823                                  ; Hex to BCD routine. Input is AX in hex (can be 0), and adds CX in hex to it, forming a BCD output in AX.
  2824                                  
  2825                                  hex_to_bcd:
  2826                                  
  2827 00000F77 53                      	push	bx
  2828                                  
  2829 00000F78 E32A                    	jcxz	h2bfin
  2830                                  
  2831                                    h2bloop:
  2832                                  
  2833 00000F7A 40                      	inc	ax
  2834                                  
  2835                                  	; First process the low nibble of AL
  2836 00000F7B 88C7                    	mov	bh, al
  2837 00000F7D 80E70F                  	and	bh, 0x0f
  2838 00000F80 80FF0A                  	cmp	bh, 0x0a
  2839 00000F83 7503                    	jne	c1
  2840 00000F85 83C006                  	add	ax, 0x0006
  2841                                  
  2842                                  	; Then the high nibble of AL
  2843                                    c1:
  2844 00000F88 88C7                    	mov	bh, al
  2845 00000F8A 80E7F0                  	and	bh, 0xf0
  2846 00000F8D 80FFA0                  	cmp	bh, 0xa0
  2847 00000F90 7503                    	jne	c2
  2848 00000F92 83C060                  	add	ax, 0x0060
  2849                                  
  2850                                  	; Then the low nibble of AH
  2851                                    c2:	
  2852 00000F95 88E7                    	mov	bh, ah
  2853 00000F97 80E70F                  	and	bh, 0x0f
  2854 00000F9A 80FF0A                  	cmp	bh, 0x0a
  2855 00000F9D 7503                    	jne	c3
  2856 00000F9F 050006                  	add	ax, 0x0600
  2857                                  
  2858                                    c3:	
  2859 00000FA2 E2D6                    	loop	h2bloop
  2860                                    h2bfin:
  2861 00000FA4 5B                      	pop	bx
  2862 00000FA5 C3                      	ret
  2863                                  
  2864                                  ; Takes a number in AL (from 0 to 99), and outputs the value in decimal using extended_putchar_al.
  2865                                  
  2866                                  puts_decimal_al:
  2867                                  
  2868 00000FA6 50                      	push	ax
  2869                                  	
  2870 00000FA7 D40A                    	aam
  2871 00000FA9 053030                  	add	ax, 0x3030	; '00'
  2872                                  	
  2873 00000FAC 80FC30                  	cmp	ah, 0x30
  2874 00000FAF 7406                    	je	pda_2nd		; First digit is zero, so print only 2nd digit
  2875                                  
  2876 00000FB1 86C4                    	xchg	ah, al		; First digit is now in AL
  2877                                  	extended_putchar_al	; Print first digit
    15 00000FB3 0F00                <1>  db 0x0f, 0x00
  2878 00000FB5 86C4                    	xchg	ah, al		; Second digit is now in AL
  2879                                  
  2880                                    pda_2nd:
  2881                                  
  2882                                  	extended_putchar_al	; Print second digit
    15 00000FB7 0F00                <1>  db 0x0f, 0x00
  2883                                  
  2884 00000FB9 58                      	pop	ax
  2885 00000FBA C3                      	ret
  2886                                  
  2887                                  ; Keyboard adjust buffer head and tail. If either head or the tail are at the end of the buffer, reset them
  2888                                  ; back to the start, since it is a circular buffer.
  2889                                  
  2890                                  kb_adjust_buf:
  2891                                  
  2892 00000FBB 50                      	push	ax
  2893 00000FBC 53                      	push	bx
  2894                                  
  2895                                  	; Check to see if the head is at the end of the buffer (or beyond). If so, bring it back
  2896                                  	; to the start
  2897                                  
  2898 00000FBD 26A18200                	mov	ax, [es:kbbuf_end_ptr-bios_data]
  2899 00000FC1 2639061A00              	cmp	[es:kbbuf_head-bios_data], ax
  2900 00000FC6 7C0A                    	jnge	kb_adjust_tail
  2901                                  
  2902 00000FC8 268B1E8000              	mov	bx, [es:kbbuf_start_ptr-bios_data]
  2903 00000FCD 26891E1A00              	mov	[es:kbbuf_head-bios_data], bx	
  2904                                  
  2905                                    kb_adjust_tail:
  2906                                  
  2907                                  	; Check to see if the tail is at the end of the buffer (or beyond). If so, bring it back
  2908                                  	; to the start
  2909                                  
  2910 00000FD2 26A18200                	mov	ax, [es:kbbuf_end_ptr-bios_data]
  2911 00000FD6 2639061C00              	cmp	[es:kbbuf_tail-bios_data], ax
  2912 00000FDB 7C0A                    	jnge	kb_adjust_done
  2913                                  
  2914 00000FDD 268B1E8000              	mov	bx, [es:kbbuf_start_ptr-bios_data]
  2915 00000FE2 26891E1C00              	mov	[es:kbbuf_tail-bios_data], bx	
  2916                                  
  2917                                    kb_adjust_done:
  2918                                  
  2919 00000FE7 5B                      	pop	bx
  2920 00000FE8 58                      	pop	ax
  2921 00000FE9 C3                      	ret
  2922                                  
  2923                                  ; Convert CHS disk position (in CH, CL and DH) to absolute sector number in BP:SI
  2924                                  ; Floppy disks have 512 bytes per sector, 9/18 sectors per track, 2 heads. DH is head number (1 or 0), CH bits 5..0 is
  2925                                  ; sector number, CL7..6 + CH7..0 is 10-bit cylinder/track number. Hard disks have 512 bytes per sector, but a variable
  2926                                  ; number of tracks and heads.
  2927                                  
  2928                                  chs_to_abs:
  2929                                  
  2930 00000FEA 50                      	push	ax	
  2931 00000FEB 53                      	push	bx
  2932 00000FEC 51                      	push	cx
  2933 00000FED 52                      	push	dx
  2934                                  
  2935 00000FEE 2E8816[720F]            	mov	[cs:drive_num_temp], dl
  2936                                  
  2937                                  	; First, we extract the track number from CH and CL.
  2938                                  
  2939 00000FF3 51                      	push	cx
  2940 00000FF4 88CF                    	mov	bh, cl
  2941 00000FF6 B106                    	mov	cl, 6
  2942 00000FF8 D2EF                    	shr	bh, cl
  2943 00000FFA 88EB                    	mov	bl, ch
  2944                                  
  2945                                  	; Multiply track number (now in BX) by the number of heads
  2946                                  
  2947 00000FFC 2E803E[720F]01          	cmp	byte [cs:drive_num_temp], 1 ; Floppy disk?
  2948                                  
  2949 00001002 52                      	push	dx
  2950                                  
  2951 00001003 BA0000                  	mov	dx, 0
  2952 00001006 93                      	xchg	ax, bx
  2953                                  
  2954 00001007 7510                    	jne	chs_hd
  2955                                  
  2956 00001009 D1E0                    	shl	ax, 1 ; Multiply by 2 (number of heads on FD)
  2957 0000100B 50                      	push	ax
  2958 0000100C 31C0                    	xor	ax, ax
  2959 0000100E 2EA0[390F]              	mov	al, [cs:int1e_spt]
  2960 00001012 2EA3[6E0F]              	mov	[cs:drive_sectors_temp], ax ; Retrieve sectors per track from INT 1E table
  2961 00001016 58                      	pop	ax
  2962                                  
  2963 00001017 EB1A                    	jmp	chs_continue
  2964                                  
  2965                                  chs_hd:
  2966                                  
  2967 00001019 2E8B2E[6A0F]            	mov	bp, [cs:hd_max_head]
  2968 0000101E 45                      	inc	bp
  2969 0000101F 2E892E[700F]            	mov	[cs:drive_heads_temp], bp
  2970                                  
  2971 00001024 2EF726[700F]            	mul	word [cs:drive_heads_temp] ; HD, so multiply by computed head count
  2972                                  
  2973 00001029 2E8B2E[660F]            	mov	bp, [cs:hd_max_sector] ; We previously calculated maximum HD track, so number of tracks is 1 more
  2974 0000102E 2E892E[6E0F]            	mov	[cs:drive_sectors_temp], bp
  2975                                  
  2976                                  chs_continue:
  2977                                  
  2978 00001033 93                      	xchg	ax, bx
  2979                                  
  2980 00001034 5A                      	pop	dx
  2981                                  
  2982 00001035 86D6                    	xchg	dh, dl
  2983 00001037 B600                    	mov	dh, 0
  2984 00001039 01D3                    	add	bx, dx
  2985                                  
  2986 0000103B 2EA1[6E0F]              	mov	ax, [cs:drive_sectors_temp]
  2987 0000103F F7E3                    	mul	bx
  2988                                  
  2989                                  	; Now we extract the sector number (from 1 to 63) - for some reason they start from 1
  2990                                  
  2991 00001041 59                      	pop	cx
  2992 00001042 B500                    	mov	ch, 0
  2993 00001044 80E13F                  	and	cl, 0x3F
  2994 00001047 FEC9                    	dec	cl
  2995                                  
  2996 00001049 01C8                    	add	ax, cx
  2997 0000104B 83D200                  	adc	dx, 0
  2998 0000104E 89C5                    	mov	bp, ax
  2999 00001050 89D6                    	mov	si, dx
  3000                                  
  3001                                  	; Now, SI:BP contains offset into disk image file (FD or HD)
  3002                                  
  3003 00001052 5A                      	pop	dx
  3004 00001053 59                      	pop	cx
  3005 00001054 5B                      	pop	bx
  3006 00001055 58                      	pop	ax
  3007 00001056 C3                      	ret
  3008                                  
  3009                                  ; Clear screen using ANSI codes. Also clear video memory with attribute in BH
  3010                                  
  3011                                  clear_screen:
  3012                                  
  3013 00001057 50                      	push	ax
  3014                                  
  3015 00001058 B01B                    	mov	al, 0x1B	; Escape
  3016                                  	extended_putchar_al
    15 0000105A 0F00                <1>  db 0x0f, 0x00
  3017 0000105C B05B                    	mov	al, '['		; ANSI
  3018                                  	extended_putchar_al
    15 0000105E 0F00                <1>  db 0x0f, 0x00
  3019 00001060 B072                    	mov	al, 'r'		; Set scrolling window
  3020                                  	extended_putchar_al
    15 00001062 0F00                <1>  db 0x0f, 0x00
  3021                                  
  3022 00001064 B01B                    	mov	al, 0x1B	; Escape
  3023                                  	extended_putchar_al
    15 00001066 0F00                <1>  db 0x0f, 0x00
  3024 00001068 B05B                    	mov	al, '['		; ANSI
  3025                                  	extended_putchar_al
    15 0000106A 0F00                <1>  db 0x0f, 0x00
  3026 0000106C B030                    	mov	al, '0'		; Reset attributes
  3027                                  	extended_putchar_al
    15 0000106E 0F00                <1>  db 0x0f, 0x00
  3028 00001070 B06D                    	mov	al, 'm'		; Reset attributes
  3029                                  	extended_putchar_al
    15 00001072 0F00                <1>  db 0x0f, 0x00
  3030                                  
  3031 00001074 53                      	push	bx
  3032 00001075 51                      	push	cx
  3033 00001076 55                      	push	bp
  3034 00001077 50                      	push	ax
  3035 00001078 06                      	push	es
  3036                                  
  3037 00001079 89DD                    	mov	bp, bx		; Convert from CGA to ANSI
  3038 0000107B B10C                    	mov	cl, 12
  3039 0000107D D3CD                    	ror	bp, cl
  3040 0000107F 83E507                  	and	bp, 7
  3041 00001082 2E8A9E[5516]            	mov	bl, byte [cs:bp+colour_table]
  3042 00001087 80C30A                  	add	bl, 10
  3043                                  
  3044 0000108A B01B                    	mov	al, 0x1B	; Escape
  3045                                  	extended_putchar_al
    15 0000108C 0F00                <1>  db 0x0f, 0x00
  3046 0000108E B05B                    	mov	al, '['		; ANSI
  3047                                  	extended_putchar_al
    15 00001090 0F00                <1>  db 0x0f, 0x00
  3048 00001092 88D8                    	mov	al, bl		; Background colour
  3049 00001094 E80FFF                  	call	puts_decimal_al
  3050 00001097 B06D                    	mov	al, 'm'		; Set cursor position command
  3051                                  	extended_putchar_al
    15 00001099 0F00                <1>  db 0x0f, 0x00
  3052                                  
  3053 0000109B B84000                  	mov	ax, 0x40
  3054 0000109E 8EC0                    	mov	es, ax
  3055 000010A0 26C606500000            	mov	byte [es:curpos_x-bios_data], 0
  3056 000010A6 26C6069D0000            	mov	byte [es:crt_curpos_x-bios_data], 0
  3057 000010AC 26C606510000            	mov	byte [es:curpos_y-bios_data], 0
  3058 000010B2 26C6069E0000            	mov	byte [es:crt_curpos_y-bios_data], 0
  3059                                  
  3060 000010B8 07                      	pop	es
  3061 000010B9 58                      	pop	ax
  3062 000010BA 5D                      	pop	bp
  3063 000010BB 59                      	pop	cx
  3064 000010BC 5B                      	pop	bx
  3065                                  
  3066 000010BD B01B                    	mov	al, 0x1B	; Escape
  3067                                  	extended_putchar_al
    15 000010BF 0F00                <1>  db 0x0f, 0x00
  3068 000010C1 B05B                    	mov	al, '['		; ANSI
  3069                                  	extended_putchar_al
    15 000010C3 0F00                <1>  db 0x0f, 0x00
  3070 000010C5 B032                    	mov	al, '2'		; Clear screen
  3071                                  	extended_putchar_al
    15 000010C7 0F00                <1>  db 0x0f, 0x00
  3072 000010C9 B04A                    	mov	al, 'J'
  3073                                  	extended_putchar_al
    15 000010CB 0F00                <1>  db 0x0f, 0x00
  3074                                  
  3075 000010CD B01B                    	mov	al, 0x1B	; Escape
  3076                                  	extended_putchar_al
    15 000010CF 0F00                <1>  db 0x0f, 0x00
  3077 000010D1 B05B                    	mov	al, '['		; ANSI
  3078                                  	extended_putchar_al
    15 000010D3 0F00                <1>  db 0x0f, 0x00
  3079 000010D5 B031                    	mov	al, '1'		; Cursor row 1
  3080                                  	extended_putchar_al
    15 000010D7 0F00                <1>  db 0x0f, 0x00
  3081 000010D9 B03B                    	mov	al, ';'
  3082                                  	extended_putchar_al
    15 000010DB 0F00                <1>  db 0x0f, 0x00
  3083 000010DD B031                    	mov	al, '1'		; Cursor column 1
  3084                                  	extended_putchar_al
    15 000010DF 0F00                <1>  db 0x0f, 0x00
  3085 000010E1 B048                    	mov	al, 'H'		; Set cursor
  3086                                  	extended_putchar_al
    15 000010E3 0F00                <1>  db 0x0f, 0x00
  3087                                  
  3088 000010E5 06                      	push	es
  3089 000010E6 57                      	push	di
  3090 000010E7 51                      	push	cx
  3091                                  
  3092 000010E8 FC                      	cld
  3093 000010E9 B800B8                  	mov	ax, 0xb800
  3094 000010EC 8EC0                    	mov	es, ax
  3095 000010EE BF0000                  	mov	di, 0
  3096 000010F1 B000                    	mov	al, 0
  3097 000010F3 88FC                    	mov	ah, bh
  3098 000010F5 B9D007                  	mov	cx, 80*25
  3099 000010F8 F3AB                    	rep	stosw
  3100                                  
  3101 000010FA FC                      	cld
  3102 000010FB BF00C8                  	mov	di, 0xc800
  3103 000010FE 8EC7                    	mov	es, di
  3104 00001100 BF0000                  	mov	di, 0
  3105 00001103 B9D007                  	mov	cx, 80*25
  3106 00001106 F3AB                    	rep	stosw
  3107                                  
  3108 00001108 FC                      	cld
  3109 00001109 BF00C0                  	mov	di, 0xc000
  3110 0000110C 8EC7                    	mov	es, di
  3111 0000110E BF0000                  	mov	di, 0
  3112 00001111 B9D007                  	mov	cx, 80*25
  3113 00001114 F3AB                    	rep	stosw
  3114                                  
  3115 00001116 59                      	pop	cx
  3116 00001117 5F                      	pop	di
  3117 00001118 07                      	pop	es
  3118                                  
  3119 00001119 58                      	pop	ax
  3120                                  
  3121 0000111A 2EC606[8716]01          	mov	byte [cs:vram_dirty], 1
  3122                                  
  3123 00001120 C3                      	ret
  3124                                  
  3125                                  ; Pushes a key press, followed by a key release, event to I/O port 0x60 and calls
  3126                                  ; INT 9.
  3127                                  
  3128                                  keypress_release:
  3129                                  
  3130 00001121 50                      	push	ax
  3131                                  
  3132 00001122 26803E9F0000            	cmp	byte [es:key_now_down-bios_data], 0
  3133 00001128 740B                    	je	kpr_no_prev_release
  3134                                  
  3135 0000112A 26A09F00                	mov	al, [es:key_now_down-bios_data]
  3136 0000112E 0480                    	add	al, 0x80
  3137 00001130 E80B00                  	call	io_key_available
  3138                                  
  3139 00001133 58                      	pop	ax
  3140 00001134 50                      	push	ax
  3141                                  
  3142                                    kpr_no_prev_release:
  3143                                  
  3144 00001135 26A29F00                	mov	[es:key_now_down-bios_data], al
  3145 00001139 E80200                  	call	io_key_available
  3146                                  
  3147 0000113C 58                      	pop	ax
  3148                                  
  3149 0000113D C3                      	ret
  3150                                  
  3151                                  ; Sets key available flag on I/O port 0x64, outputs key scan code in AL to I/O port 0x60, and calls INT 9
  3152                                  
  3153                                  io_key_available:
  3154                                  
  3155 0000113E 50                      	push	ax
  3156 0000113F B001                    	mov	al, 1
  3157 00001141 E664                    	out	0x64, al
  3158 00001143 58                      	pop	ax
  3159                                  
  3160 00001144 E660                    	out	0x60, al
  3161 00001146 CD09                    	int	9
  3162 00001148 C3                      	ret
  3163                                  
  3164                                  ; Reaches up into the stack before the end of an interrupt handler, and sets the carry flag
  3165                                  
  3166                                  reach_stack_stc:
  3167                                  
  3168 00001149 87E5                    	xchg	bp, sp
  3169 0000114B 834E0401                	or	word [bp+4], 1
  3170 0000114F 87E5                    	xchg	bp, sp
  3171 00001151 CF                      	iret
  3172                                  
  3173                                  ; Reaches up into the stack before the end of an interrupt handler, and clears the carry flag
  3174                                  
  3175                                  reach_stack_clc:
  3176                                  
  3177 00001152 87E5                    	xchg	bp, sp
  3178 00001154 836604FE                	and	word [bp+4], 0xfffe
  3179 00001158 87E5                    	xchg	bp, sp
  3180 0000115A CF                      	iret
  3181                                  
  3182                                  ; Reaches up into the stack before the end of an interrupt handler, and returns with the current
  3183                                  ; setting of the carry flag
  3184                                  
  3185                                  reach_stack_carry:
  3186                                  
  3187 0000115B 72EC                    	jc	reach_stack_stc
  3188 0000115D EBF3                    	jmp	reach_stack_clc
  3189                                  
  3190                                  ; This is the VMEM driver, to support direct video memory access in 80x25 colour CGA mode.
  3191                                  ; It scans through CGA video memory at address B800:0, and if there is anything there (i.e.
  3192                                  ; applications are doing direct video memory writes), converts the buffer to a sequence of
  3193                                  ; ANSI terminal codes to render the screen output.
  3194                                  ;
  3195                                  ; Note: this destroys all registers. It is the responsibility of the caller to save/restore
  3196                                  ; them.
  3197                                  
  3198                                  vmem_driver_entry:
  3199                                  	
  3200 0000115F 2E803E[8616]01          	cmp	byte [cs:in_update], 1
  3201 00001165 741B                    	je	just_finish		; If we are already in the middle of an update, skip. Needed for re-entrancy
  3202                                  
  3203 00001167 2EFE06[8516]            	inc	byte [cs:int8_ctr]
  3204 0000116C 2E803E[8516]08          	cmp	byte [cs:int8_ctr], 8	; Only do this once every 8 timer ticks
  3205 00001172 750E                    	jne	just_finish
  3206                                  
  3207                                  gmode_test:
  3208                                  
  3209 00001174 2EC606[8516]00          	mov	byte [cs:int8_ctr], 0	
  3210 0000117A BAB803                  	mov	dx, 0x3b8		; Do not update if in Hercules graphics mode
  3211 0000117D EC                      	in	al, dx
  3212 0000117E A802                    	test	al, 2
  3213 00001180 7401                    	jz	vram_zero_check
  3214                                  
  3215                                  just_finish:
  3216                                  
  3217 00001182 C3                      	ret
  3218                                  
  3219                                  vram_zero_check:			; Check if video memory is blank - if so, do nothing
  3220                                  	
  3221 00001183 2EC606[8616]01          	mov	byte [cs:in_update], 1
  3222                                  
  3223 00001189 FB                      	sti
  3224                                  
  3225 0000118A BB4000                  	mov	bx, 0x40
  3226 0000118D 8EDB                    	mov	ds, bx
  3227                                  
  3228 0000118F 8B3EAD00                	mov	di, [vmem_offset-bios_data] ; Adjust for CRTC video memory offset register
  3229 00001193 D1E7                    	shl	di, 1
  3230 00001195 57                      	push	di
  3231                                  
  3232 00001196 BB00B8                  	mov	bx, 0xb800
  3233 00001199 8EC3                    	mov	es, bx
  3234 0000119B B9D007                  	mov	cx, 0x7d0
  3235 0000119E B80007                  	mov	ax, 0x0700
  3236                                  
  3237 000011A1 FC                      	cld
  3238 000011A2 F3AF                    	repz	scasw
  3239 000011A4 5F                      	pop	di
  3240 000011A5 7503E9F101              	je	vmem_done	; Nothing has been written to video RAM - no need to update
  3241                                  
  3242 000011AA 2E803E[8716]01          	cmp	byte [cs:vram_dirty], 1 ; Cleared screen so always need to update
  3243 000011B0 7434                    	je	vram_update
  3244                                  
  3245 000011B2 BB00C8                  	mov	bx, 0xc800
  3246 000011B5 8EDB                    	mov	ds, bx
  3247 000011B7 BE0000                  	mov	si, 0
  3248 000011BA B9D007                  	mov	cx, 0x7d0
  3249                                  
  3250 000011BD FC                      	cld
  3251 000011BE F3A7                    	repz	cmpsw
  3252 000011C0 7524                    	jne	vram_update		; Video RAM is changed - need to update
  3253                                  
  3254 000011C2 BB4000                  	mov	bx, 0x40
  3255 000011C5 8EDB                    	mov	ds, bx
  3256 000011C7 8A3E9E00                	mov	bh, [crt_curpos_y-bios_data]
  3257 000011CB 8A1E9D00                	mov	bl, [crt_curpos_x-bios_data]
  3258                                  	
  3259 000011CF 2E3A3E[8C16]            	cmp	bh, [cs:crt_curpos_y_last]
  3260 000011D4 7403E97401              	jne	restore_cursor ; Cursor position changed (but nothing else) so update just that
  3261 000011D9 2E3A1E[8B16]            	cmp	bl, [cs:crt_curpos_x_last]
  3262 000011DE 7403E96A01              	jne	restore_cursor
  3263                                  
  3264 000011E3 E9B501                  	jmp	vmem_done
  3265                                  
  3266                                  vram_update:
  3267                                  
  3268 000011E6 BB4000                  	mov	bx, 0x40
  3269 000011E9 8EC3                    	mov	es, bx
  3270                                  
  3271 000011EB 0E                      	push	cs
  3272 000011EC 1F                      	pop	ds
  3273                                  
  3274 000011ED C606[8916]FF            	mov	byte [int_curpos_x], 0xff
  3275 000011F2 C606[8A16]FF            	mov	byte [int_curpos_y], 0xff
  3276                                  
  3277 000011F7 26803EA10000            	cmp	byte [es:cursor_visible-bios_data], 0
  3278 000011FD 7403                    	je	dont_hide_cursor
  3279                                  
  3280 000011FF E8BF01                  	call	ansi_hide_cursor
  3281                                  
  3282                                  dont_hide_cursor:
  3283                                  
  3284 00001202 C606[8816]FF            	mov	byte [last_attrib], 0xff
  3285                                  
  3286 00001207 BB4000                  	mov	bx, 0x40
  3287 0000120A 8EC3                    	mov	es, bx
  3288                                  
  3289 0000120C 268B3EAD00              	mov	di, [es:vmem_offset-bios_data] ; Adjust for CRTC video memory offset register
  3290 00001211 D1E7                    	shl	di, 1
  3291 00001213 83EF02                  	sub	di, 2		; Combined offset
  3292                                  
  3293 00001216 BB00B8                  	mov	bx, 0xb800
  3294 00001219 8EC3                    	mov	es, bx
  3295                                  
  3296                                  	; Set up the initial cursor coordinates. Since the first thing we do is increment the cursor
  3297                                  	; position, this initial position is actually off the screen
  3298                                  
  3299 0000121B BDFFFF                  	mov	bp, -1		; Row number
  3300 0000121E BE4F00                  	mov	si, 79		; Column number
  3301                                  
  3302                                  disp_loop:
  3303                                  
  3304                                  	; Advance to next column
  3305                                  
  3306 00001221 83C702                  	add	di, 2
  3307 00001224 46                      	inc	si
  3308 00001225 83FE50                  	cmp	si, 80
  3309 00001228 7571                    	jne	cont
  3310                                  
  3311                                  	; Column is 80, so set to 0 and advance a line
  3312                                  
  3313                                  loop_next_line:
  3314                                  
  3315 0000122A BE0000                  	mov	si, 0
  3316 0000122D 45                      	inc	bp
  3317                                  
  3318                                  	; Bottom of the screen reached already? If so, we're done
  3319                                  
  3320 0000122E 83FD19                  	cmp	bp, 25
  3321 00001231 7503E90701              	je	restore_attrib
  3322                                  
  3323                                  	; See if this line has changed in video RAM
  3324                                  
  3325 00001236 2E803E[8716]01          	cmp	byte [cs:vram_dirty], 1
  3326 0000123C 745D                    	je	cont
  3327                                  
  3328 0000123E 56                      	push	si
  3329 0000123F 57                      	push	di
  3330                                  
  3331 00001240 BB00B8                  	mov	bx, 0xb800
  3332 00001243 8EDB                    	mov	ds, bx
  3333 00001245 BB00C8                  	mov	bx, 0xc800
  3334 00001248 8EC3                    	mov	es, bx
  3335 0000124A 89FE                    	mov	si, di
  3336                                  
  3337 0000124C 06                      	push	es
  3338 0000124D BB4000                  	mov	bx, 0x40
  3339 00001250 8EC3                    	mov	es, bx
  3340 00001252 262B3EAD00              	sub	di, [es:vmem_offset-bios_data] ; Adjust for CRTC video memory offset register
  3341 00001257 262B3EAD00              	sub	di, [es:vmem_offset-bios_data]
  3342 0000125C 07                      	pop	es
  3343                                  
  3344 0000125D B95000                  	mov	cx, 80 ; One row's worth of characters
  3345                                  
  3346 00001260 FC                      	cld
  3347 00001261 F3A7                    	repz	cmpsw
  3348 00001263 5F                      	pop	di
  3349 00001264 5E                      	pop	si
  3350                                  
  3351 00001265 742E                    	je	vmem_next_line ; This line is unchanged in video RAM, so do not update
  3352                                  
  3353                                  vmem_copy_buf:
  3354                                  
  3355                                  	; Copy the changed line to our double buffer at C800:0
  3356                                  
  3357 00001267 51                      	push	cx
  3358 00001268 56                      	push	si
  3359 00001269 57                      	push	di
  3360                                  
  3361 0000126A 06                      	push	es
  3362 0000126B BB4000                  	mov	bx, 0x40
  3363 0000126E 8EC3                    	mov	es, bx
  3364 00001270 89FE                    	mov	si, di
  3365 00001272 262B3EAD00              	sub	di, [es:vmem_offset-bios_data] ; Adjust for CRTC video memory offset register
  3366 00001277 262B3EAD00              	sub	di, [es:vmem_offset-bios_data]
  3367 0000127C 07                      	pop	es
  3368                                  
  3369 0000127D B95000                  	mov	cx, 80 ; One row's worth of characters
  3370 00001280 FC                      	cld
  3371 00001281 F3A5                    	rep	movsw
  3372                                  
  3373 00001283 5F                      	pop	di
  3374 00001284 5E                      	pop	si
  3375 00001285 59                      	pop	cx
  3376                                  
  3377                                  	; We want to start the update at the first character which differs - so calculate its position.
  3378                                  
  3379 00001286 BB4F00                  	mov	bx, 79
  3380 00001289 29CB                    	sub	bx, cx
  3381                                  
  3382 0000128B 01DF                    	add	di, bx
  3383 0000128D 01DF                    	add	di, bx
  3384 0000128F 01DE                    	add	si, bx
  3385                                  
  3386 00001291 1E                      	push	ds
  3387 00001292 07                      	pop	es	; Set ES back to B800
  3388                                  
  3389 00001293 EB06                    	jmp	cont
  3390                                  
  3391                                  vmem_next_line:
  3392                                  
  3393 00001295 81C7A000                	add	di, 160
  3394 00001299 EB8F                    	jmp	loop_next_line ; Line is unchanged in video RAM
  3395                                  
  3396                                  cont:
  3397 0000129B 0E                      	push	cs
  3398 0000129C 1F                      	pop	ds
  3399                                  
  3400 0000129D 26803D00                	cmp	byte [es:di], 0		; Ignore null characters in video memory
  3401 000012A1 7503E97BFF              	je	disp_loop
  3402                                  
  3403 000012A6 89E8                    	mov	ax, bp
  3404 000012A8 89F3                    	mov	bx, si
  3405 000012AA 88C6                    	mov	dh, al
  3406 000012AC 88DA                    	mov	dl, bl
  3407                                  
  3408 000012AE 3A36[8A16]              	cmp	dh, [int_curpos_y]	; Same row as the last time?
  3409 000012B2 750A                    	jne	ansi_set_cur_pos
  3410 000012B4 52                      	push	dx
  3411 000012B5 FECA                    	dec	dl
  3412 000012B7 3A16[8916]              	cmp	dl, [int_curpos_x]	; One column to the right since the last time?
  3413 000012BB 5A                      	pop	dx
  3414 000012BC 7422                    	je	skip_set_cur_pos
  3415                                  
  3416                                  ansi_set_cur_pos:
  3417                                  
  3418 000012BE B01B                    	mov	al, 0x1B	; Escape
  3419                                  	extended_putchar_al
    15 000012C0 0F00                <1>  db 0x0f, 0x00
  3420 000012C2 B05B                    	mov	al, '['		; ANSI
  3421                                  	extended_putchar_al
    15 000012C4 0F00                <1>  db 0x0f, 0x00
  3422 000012C6 88F0                    	mov	al, dh		; Row number
  3423 000012C8 FEC0                    	inc	al
  3424 000012CA E8D9FC                  	call	puts_decimal_al
  3425 000012CD B03B                    	mov	al, ';'		; ANSI
  3426                                  	extended_putchar_al
    15 000012CF 0F00                <1>  db 0x0f, 0x00
  3427 000012D1 88D0                    	mov	al, dl		; Column number
  3428 000012D3 FEC0                    	inc	al
  3429 000012D5 E8CEFC                  	call	puts_decimal_al
  3430 000012D8 B048                    	mov	al, 'H'		; Set cursor position command
  3431                                  	extended_putchar_al
    15 000012DA 0F00                <1>  db 0x0f, 0x00
  3432                                  
  3433 000012DC 8836[8A16]              	mov	[int_curpos_y], dh
  3434                                  
  3435                                  skip_set_cur_pos:
  3436                                  
  3437 000012E0 8816[8916]              	mov	[int_curpos_x], dl
  3438                                  
  3439 000012E4 268A5501                	mov	dl, [es:di+1]
  3440 000012E8 3A16[8816]              	cmp	dl, [last_attrib]
  3441 000012EC 743E                    	je	skip_attrib
  3442                                  
  3443 000012EE 8816[8816]              	mov	[last_attrib], dl
  3444                                  
  3445 000012F2 B01B                    	mov	al, 0x1B	; Escape
  3446                                  	extended_putchar_al
    15 000012F4 0F00                <1>  db 0x0f, 0x00
  3447 000012F6 B05B                    	mov	al, '['		; ANSI
  3448                                  	extended_putchar_al
    15 000012F8 0F00                <1>  db 0x0f, 0x00
  3449                                  
  3450 000012FA 88D0                    	mov	al, dl
  3451 000012FC 2408                    	and	al, 8		; Bright attribute now in AL
  3452                                  	cpu	186
  3453 000012FE C0E803                  	shr	al, 3
  3454                                  	cpu	8086
  3455                                  
  3456 00001301 E8A2FC                  	call	puts_decimal_al
  3457 00001304 B03B                    	mov	al, ';'
  3458                                  	extended_putchar_al
    15 00001306 0F00                <1>  db 0x0f, 0x00
  3459                                  
  3460 00001308 52                      	push	dx
  3461                                  
  3462 00001309 80E207                  	and	dl, 7		; Foreground colour now in DL
  3463 0000130C BB[5516]                	mov	bx, colour_table
  3464 0000130F 88D0                    	mov	al, dl
  3465 00001311 D7                      	xlat
  3466                                  
  3467 00001312 E891FC                  	call	puts_decimal_al
  3468 00001315 B03B                    	mov	al, ';'
  3469                                  	extended_putchar_al
    15 00001317 0F00                <1>  db 0x0f, 0x00
  3470                                  
  3471 00001319 5A                      	pop	dx
  3472                                  
  3473                                  	cpu	186
  3474 0000131A C0EA04                  	shr	dl, 4
  3475                                  	cpu	8086
  3476 0000131D 80E207                  	and	dl, 7		; Background colour now in DL
  3477                                  
  3478 00001320 88D0                    	mov	al, dl
  3479 00001322 D7                      	xlat
  3480                                  
  3481 00001323 040A                    	add	al, 10
  3482 00001325 E87EFC                  	call	puts_decimal_al
  3483 00001328 B06D                    	mov	al, 'm'		; Set cursor attribute command
  3484                                  	extended_putchar_al
    15 0000132A 0F00                <1>  db 0x0f, 0x00
  3485                                  
  3486                                  skip_attrib:
  3487                                  
  3488 0000132C 268A05                  	mov	al, [es:di]
  3489                                  
  3490 0000132F 3C20                    	cmp	al, 32		; Non-printable ASCII? (< 32 decimal)
  3491 00001331 7305                    	jae	just_show_it
  3492                                  
  3493 00001333 BB[5D16]                	mov	bx, low_ascii_conv
  3494 00001336 2ED7                    	cs	xlat		; Convert to printable representation (mostly spaces)
  3495                                  
  3496                                  just_show_it:
  3497                                  
  3498                                  	extended_putchar_al
    15 00001338 0F00                <1>  db 0x0f, 0x00
  3499                                  
  3500 0000133A E9E4FE                  	jmp	disp_loop
  3501                                  
  3502                                  restore_attrib:
  3503                                  
  3504 0000133D B01B                    	mov	al, 0x1B	; Escape
  3505                                  	extended_putchar_al
    15 0000133F 0F00                <1>  db 0x0f, 0x00
  3506 00001341 B05B                    	mov	al, '['		; ANSI
  3507                                  	extended_putchar_al
    15 00001343 0F00                <1>  db 0x0f, 0x00
  3508 00001345 B030                    	mov	al, '0'		; Reset attributes
  3509                                  	extended_putchar_al
    15 00001347 0F00                <1>  db 0x0f, 0x00
  3510 00001349 B06D                    	mov	al, 'm'
  3511                                  	extended_putchar_al
    15 0000134B 0F00                <1>  db 0x0f, 0x00
  3512                                  
  3513                                  restore_cursor:
  3514                                  
  3515                                  	; On a real PC, the 6845 CRT cursor position registers take place over the BIOS
  3516                                  	; Data Area ones. So, if the cursor is not off the screen, set it to the CRT
  3517                                  	; position.
  3518                                  
  3519 0000134D BB4000                  	mov	bx, 0x40
  3520 00001350 8EDB                    	mov	ds, bx
  3521                                  
  3522 00001352 8A3E9E00                	mov	bh, [crt_curpos_y-bios_data]
  3523 00001356 8A1E9D00                	mov	bl, [crt_curpos_x-bios_data]
  3524 0000135A 2E883E[8C16]            	mov	[cs:crt_curpos_y_last], bh
  3525 0000135F 2E881E[8B16]            	mov	[cs:crt_curpos_x_last], bl
  3526                                  		
  3527 00001364 80FF18                  	cmp	bh, 24
  3528 00001367 772F                    	ja	vmem_end_hidden_cursor
  3529 00001369 80FB4F                  	cmp	bl, 79
  3530 0000136C 772A                    	ja	vmem_end_hidden_cursor
  3531                                  
  3532 0000136E B01B                    	mov	al, 0x1B	; ANSI
  3533                                  	extended_putchar_al
    15 00001370 0F00                <1>  db 0x0f, 0x00
  3534 00001372 B05B                    	mov	al, '['		; ANSI
  3535                                  	extended_putchar_al
    15 00001374 0F00                <1>  db 0x0f, 0x00
  3536 00001376 88F8                    	mov	al, bh		; Row number
  3537 00001378 FEC0                    	inc	al
  3538 0000137A E829FC                  	call	puts_decimal_al
  3539 0000137D B03B                    	mov	al, ';'		; ANSI
  3540                                  	extended_putchar_al
    15 0000137F 0F00                <1>  db 0x0f, 0x00
  3541 00001381 88D8                    	mov	al, bl		; Column number
  3542 00001383 FEC0                    	inc	al
  3543 00001385 E81EFC                  	call	puts_decimal_al
  3544 00001388 B048                    	mov	al, 'H'		; Set cursor position command
  3545                                  	extended_putchar_al
    15 0000138A 0F00                <1>  db 0x0f, 0x00
  3546                                  
  3547                                  restore_cursor_visible:
  3548                                  
  3549 0000138C 803EA10001              	cmp	byte [cursor_visible-bios_data], 1
  3550 00001391 7505                    	jne	vmem_end_hidden_cursor
  3551                                  
  3552 00001393 E81200                  	call	ansi_show_cursor
  3553 00001396 EB03                    	jmp	vmem_done
  3554                                  
  3555                                  vmem_end_hidden_cursor:
  3556                                  
  3557 00001398 E82600                  	call	ansi_hide_cursor
  3558                                  
  3559                                  vmem_done:
  3560                                  
  3561 0000139B 2EC606[8716]00          	mov	byte [cs:vram_dirty], 0
  3562 000013A1 2EC606[8616]00          	mov	byte [cs:in_update], 0
  3563 000013A7 C3                      	ret
  3564                                  
  3565                                  ; Show cursor using ANSI codes
  3566                                  
  3567                                  ansi_show_cursor:
  3568                                  
  3569 000013A8 B01B                    	mov	al, 0x1B
  3570                                  	extended_putchar_al
    15 000013AA 0F00                <1>  db 0x0f, 0x00
  3571 000013AC B05B                    	mov	al, '['
  3572                                  	extended_putchar_al
    15 000013AE 0F00                <1>  db 0x0f, 0x00
  3573 000013B0 B03F                    	mov	al, '?'
  3574                                  	extended_putchar_al
    15 000013B2 0F00                <1>  db 0x0f, 0x00
  3575 000013B4 B032                    	mov	al, '2'
  3576                                  	extended_putchar_al
    15 000013B6 0F00                <1>  db 0x0f, 0x00
  3577 000013B8 B035                    	mov	al, '5'
  3578                                  	extended_putchar_al
    15 000013BA 0F00                <1>  db 0x0f, 0x00
  3579 000013BC B068                    	mov	al, 'h'
  3580                                  	extended_putchar_al
    15 000013BE 0F00                <1>  db 0x0f, 0x00
  3581                                  
  3582 000013C0 C3                      	ret
  3583                                  
  3584                                  ; Hide cursor using ANSI codes
  3585                                  
  3586                                  ansi_hide_cursor:
  3587                                  
  3588 000013C1 B01B                    	mov	al, 0x1B
  3589                                  	extended_putchar_al
    15 000013C3 0F00                <1>  db 0x0f, 0x00
  3590 000013C5 B05B                    	mov	al, '['
  3591                                  	extended_putchar_al
    15 000013C7 0F00                <1>  db 0x0f, 0x00
  3592 000013C9 B03F                    	mov	al, '?'
  3593                                  	extended_putchar_al
    15 000013CB 0F00                <1>  db 0x0f, 0x00
  3594 000013CD B032                    	mov	al, '2'
  3595                                  	extended_putchar_al
    15 000013CF 0F00                <1>  db 0x0f, 0x00
  3596 000013D1 B035                    	mov	al, '5'
  3597                                  	extended_putchar_al
    15 000013D3 0F00                <1>  db 0x0f, 0x00
  3598 000013D5 B06C                    	mov	al, 'l'
  3599                                  	extended_putchar_al
    15 000013D7 0F00                <1>  db 0x0f, 0x00
  3600                                  
  3601 000013D9 C3                      	ret
  3602                                  
  3603                                  ; ****************************************************************************************
  3604                                  ; That's it for the code. Now, the data tables follow.
  3605                                  ; ****************************************************************************************
  3606                                  
  3607                                  ; Standard PC-compatible BIOS data area - to copy to 40:0
  3608                                  
  3609                                  bios_data:
  3610                                  
  3611 000013DA 0000                    com1addr	dw	0
  3612 000013DC 0000                    com2addr	dw	0
  3613 000013DE 0000                    com3addr	dw	0
  3614 000013E0 0000                    com4addr	dw	0
  3615 000013E2 0000                    lpt1addr	dw	0
  3616 000013E4 0000                    lpt2addr	dw	0
  3617 000013E6 0000                    lpt3addr	dw	0
  3618 000013E8 0000                    lpt4addr	dw	0
  3619 000013EA 2100                    equip		dw	0b0000000000100001
  3620                                  ;equip		dw	0b0000000100100001
  3621 000013EC 00                      		db	0
  3622 000013ED 8002                    memsize		dw	0x280
  3623 000013EF 00                      		db	0
  3624 000013F0 00                      		db	0
  3625 000013F1 00                      keyflags1	db	0
  3626 000013F2 00                      keyflags2	db	0
  3627 000013F3 00                      		db	0
  3628 000013F4 1E00                    kbbuf_head	dw	kbbuf-bios_data
  3629 000013F6 1E00                    kbbuf_tail	dw	kbbuf-bios_data
  3630 000013F8 58<rep 20h>             kbbuf: times 32	db	'X'
  3631 00001418 00                      drivecal	db	0
  3632 00001419 00                      diskmotor	db	0
  3633 0000141A 07                      motorshutoff	db	0x07
  3634 0000141B 00                      disk_laststatus	db	0
  3635 0000141C 00<rep 7h>              times 7		db	0
  3636 00001423 03                      vidmode		db	0x03
  3637 00001424 5000                    vid_cols	dw	80
  3638 00001426 0010                    page_size	dw	0x1000
  3639 00001428 0000                    		dw	0
  3640 0000142A 00                      curpos_x	db	0
  3641 0000142B 00                      curpos_y	db	0
  3642 0000142C 0000<rep 7h>            times 7		dw	0
  3643 0000143A 07                      cur_v_end	db	7
  3644 0000143B 06                      cur_v_start	db	6
  3645 0000143C 00                      disp_page	db	0
  3646 0000143D D403                    crtport		dw	0x3d4
  3647 0000143F 0A                      		db	10
  3648 00001440 00                      		db	0
  3649 00001441 00<rep 5h>              times 5		db	0
  3650 00001446 00000000                clk_dtimer	dd	0
  3651 0000144A 00                      clk_rollover	db	0
  3652 0000144B 00                      ctrl_break	db	0
  3653 0000144C 3412                    soft_rst_flg	dw	0x1234
  3654 0000144E 00                      		db	0
  3655 0000144F 00                      num_hd		db	0
  3656 00001450 00                      		db	0
  3657 00001451 00                      		db	0
  3658 00001452 00000000                		dd	0
  3659 00001456 00000000                		dd	0
  3660 0000145A 1E00                    kbbuf_start_ptr	dw	0x001e
  3661 0000145C 3E00                    kbbuf_end_ptr	dw	0x003e
  3662 0000145E 19                      vid_rows	db	25         ; at 40:84
  3663 0000145F 00                      		db	0
  3664 00001460 00                      		db	0
  3665 00001461 00                      vidmode_opt	db	0 ; 0x70
  3666 00001462 00                      		db	0 ; 0x89
  3667 00001463 00                      		db	0 ; 0x51
  3668 00001464 00                      		db	0 ; 0x0c
  3669 00001465 00                      		db	0
  3670 00001466 00                      		db	0
  3671 00001467 00                      		db	0
  3672 00001468 00                      		db	0
  3673 00001469 00                      		db	0
  3674 0000146A 00                      		db	0
  3675 0000146B 00                      		db	0
  3676 0000146C 00                      		db	0
  3677 0000146D 00                      		db	0
  3678 0000146E 00                      		db	0
  3679 0000146F 00                      		db	0
  3680 00001470 00                      kb_mode		db	0
  3681 00001471 00                      kb_led		db	0
  3682 00001472 00                      		db	0
  3683 00001473 00                      		db	0
  3684 00001474 00                      		db	0
  3685 00001475 00                      		db	0
  3686 00001476 00                      boot_device	db	0
  3687 00001477 00                      crt_curpos_x	db	0
  3688 00001478 00                      crt_curpos_y	db	0
  3689 00001479 00                      key_now_down	db	0
  3690 0000147A 00                      next_key_fn	db	0
  3691 0000147B 01                      cursor_visible	db	1
  3692 0000147C 00                      escape_flag_last	db	0
  3693 0000147D 00                      next_key_alt	db	0
  3694 0000147E 00                      escape_flag	db	0
  3695 0000147F 00                      notranslate_flg	db	0
  3696 00001480 00                      this_keystroke	db	0
  3697 00001481 00                      this_keystroke_ext		db	0
  3698 00001482 FFFF                    timer0_freq	dw	0xffff ; PIT channel 0 (55ms)
  3699 00001484 0000                    timer2_freq	dw	0      ; PIT channel 2
  3700 00001486 00                      cga_vmode	db	0
  3701 00001487 0000                    vmem_offset	dw	0      ; Video RAM offset
  3702 00001489 00<rep 50h>             ending:		times (0xff-($-com1addr)) db	0
  3703                                  
  3704                                  ; Keyboard scan code tables
  3705                                  
  3706 000014D9 FF1E302E201221220E-     a2scan_tbl      db	0xFF, 0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x0E, 0x0F, 0x24, 0x25, 0x26, 0x1C, 0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x39, 0x02, 0x28, 0x04, 0x05, 0x06, 0x08, 0x28, 0x0A, 0x0B, 0x09, 0x0D, 0x33, 0x0C, 0x34, 0x35, 0x0B, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x27, 0x27, 0x33, 0x0D, 0x34, 0x35, 0x03, 0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C, 0x1A, 0x2B, 0x1B, 0x07, 0x0C, 0x29, 0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32, 0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C, 0x1A, 0x2B, 0x1B, 0x29, 0x0E
  3706 000014E2 0F2425261C31181910-
  3706 000014EB 131F14162F112D152C-
  3706 000014F4 010000000039022804-
  3706 000014FD 050608280A0B090D33-
  3706 00001506 0C34350B0203040506-
  3706 0000150F 0708090A2727330D34-
  3706 00001518 35031E302E20122122-
  3706 00001521 231724252632311819-
  3706 0000152A 10131F14162F112D15-
  3706 00001533 2C1A2B1B070C291E30-
  3706 0000153C 2E2012212223172425-
  3706 00001545 263231181910131F14-
  3706 0000154E 162F112D152C1A2B1B-
  3706 00001557 290E               
  3707 00001559 000000000000000000-     a2shift_tbl     db	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0
  3707 00001562 000000000000000000-
  3707 0000156B 000000000000000000-
  3707 00001574 000000000000010101-
  3707 0000157D 010101000101010100-
  3707 00001586 000000000000000000-
  3707 0000158F 000000000100010001-
  3707 00001598 010101010101010101-
  3707 000015A1 010101010101010101-
  3707 000015AA 010101010101010101-
  3707 000015B3 010000000101000000-
  3707 000015BC 000000000000000000-
  3707 000015C5 000000000000000000-
  3707 000015CE 000000000000010101-
  3707 000015D7 0100               
  3708                                  
  3709                                  ; Interrupt vector table - to copy to 0:0
  3710                                  
  3711 000015D9 [760F]                  int_table	dw int0
  3712 000015DB 00F0                              	dw 0xf000
  3713 000015DD [760F]                            	dw int1
  3714 000015DF 00F0                              	dw 0xf000
  3715 000015E1 [760F]                            	dw int2
  3716 000015E3 00F0                              	dw 0xf000
  3717 000015E5 [760F]                            	dw int3
  3718 000015E7 00F0                              	dw 0xf000
  3719 000015E9 [760F]                            	dw int4
  3720 000015EB 00F0                              	dw 0xf000
  3721 000015ED [760F]                            	dw int5
  3722 000015EF 00F0                              	dw 0xf000
  3723 000015F1 [760F]                            	dw int6
  3724 000015F3 00F0                              	dw 0xf000
  3725 000015F5 [3202]                            	dw int7
  3726 000015F7 00F0                              	dw 0xf000
  3727 000015F9 [3F06]                            	dw int8
  3728 000015FB 00F0                              	dw 0xf000
  3729 000015FD [3D05]                            	dw int9
  3730 000015FF 00F0                              	dw 0xf000
  3731 00001601 [7D05]                            	dw inta
  3732 00001603 00F0                              	dw 0xf000
  3733 00001605 [760F]                            	dw intb
  3734 00001607 00F0                              	dw 0xf000
  3735 00001609 [760F]                            	dw intc
  3736 0000160B 00F0                              	dw 0xf000
  3737 0000160D [760F]                            	dw intd
  3738 0000160F 00F0                              	dw 0xf000
  3739 00001611 [760F]                            	dw inte
  3740 00001613 00F0                              	dw 0xf000
  3741 00001615 [760F]                            	dw intf
  3742 00001617 00F0                              	dw 0xf000
  3743 00001619 [4206]                            	dw int10
  3744 0000161B 00F0                              	dw 0xf000
  3745 0000161D [A60B]                            	dw int11
  3746 0000161F 00F0                              	dw 0xf000
  3747 00001621 [AB0B]                            	dw int12
  3748 00001623 00F0                              	dw 0xf000
  3749 00001625 [AF0B]                            	dw int13
  3750 00001627 00F0                              	dw 0xf000
  3751 00001629 [990D]                            	dw int14
  3752 0000162B 00F0                              	dw 0xf000
  3753 0000162D [A70D]                            	dw int15
  3754 0000162F 00F0                              	dw 0xf000
  3755 00001631 [AC0D]                            	dw int16
  3756 00001633 00F0                              	dw 0xf000
  3757 00001635 [310E]                            	dw int17
  3758 00001637 00F0                              	dw 0xf000
  3759 00001639 [760F]                            	dw int18
  3760 0000163B 00F0                              	dw 0xf000
  3761 0000163D [3E0E]                            	dw int19
  3762 0000163F 00F0                              	dw 0xf000
  3763 00001641 [410E]                            	dw int1a
  3764 00001643 00F0                              	dw 0xf000
  3765 00001645 [760F]                            	dw int1b
  3766 00001647 00F0                              	dw 0xf000
  3767 00001649 [340F]                            	dw int1c
  3768 0000164B 00F0                              	dw 0xf000
  3769 0000164D [760F]                            	dw int1d
  3770 0000164F 00F0                              	dw 0xf000
  3771 00001651 [350F]                            	dw int1e
  3772                                  
  3773 00001653 7A00                    itbl_size	dw $-int_table
  3774                                  
  3775                                  ; Conversion from CGA video memory colours to ANSI colours
  3776                                  
  3777 00001655 1E2220241F232125        colour_table	db	30, 34, 32, 36, 31, 35, 33, 37
  3778                                  
  3779                                  ; Conversion from non-printable low ASCII to printable
  3780                                  
  3781 0000165D 20FAFAFAFAFAFAFAFA-     low_ascii_conv	db	' ', 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, '><|!|$', 250, '|^v><--^v'
  3781 00001666 FAFAFAFAFAFAFA3E3C-
  3781 0000166F 7C217C24FA7C5E763E-
  3781 00001678 3C2D2D5E76         
  3782                                  
  3783                                  ; Conversion from UNIX cursor keys/SDL keycodes to scancodes
  3784                                  
  3785 0000167D 48504D4B                unix_cursor_xlt	db	0x48, 0x50, 0x4d, 0x4b
  3786                                  
  3787                                  ; Conversion from SDL keycodes to Home/End/PgUp/PgDn scancodes
  3788                                  
  3789 00001681 474F4951                pgup_pgdn_xlt	db	0x47, 0x4f, 0x49, 0x51
  3790                                  
  3791                                  ; Internal variables for VMEM driver
  3792                                  
  3793 00001685 00                      int8_ctr	db	0
  3794 00001686 00                      in_update	db	0
  3795 00001687 00                      vram_dirty	db	0
  3796 00001688 00                      last_attrib	db	0
  3797 00001689 00                      int_curpos_x	db	0
  3798 0000168A 00                      int_curpos_y	db	0
  3799 0000168B 00                      crt_curpos_x_last	db	0
  3800 0000168C 00                      crt_curpos_y_last	db	0
  3801                                  
  3802                                  ; INT 8 millisecond counter
  3803                                  
  3804 0000168D 0000                    last_int8_msec	dw	0
  3805 0000168F 00                      last_key_sdl	db 	0
  3806                                  
  3807                                  ; Now follow the tables for instruction decode helping
  3808                                  
  3809                                  ; R/M mode tables
  3810                                  
  3811 00001690 0303050506070C03        rm_mode0_reg1	db	3, 3, 5, 5, 6, 7, 12, 3
  3812 00001698 060706070C0C0C0C        rm_mode012_reg2	db	6, 7, 6, 7, 12, 12, 12, 12
  3813 000016A0 0000000000000100        rm_mode0_disp	db	0, 0, 0, 0, 0, 0, 1, 0
  3814 000016A8 0B0B0A0A0B0B0B0B        rm_mode0_dfseg	db	11, 11, 10, 10, 11, 11, 11, 11
  3815                                  
  3816 000016B0 0303050506070503        rm_mode12_reg1	db	3, 3, 5, 5, 6, 7, 5, 3
  3817 000016B8 0101010101010101        rm_mode12_disp	db	1, 1, 1, 1, 1, 1, 1, 1
  3818 000016C0 0B0B0A0A0B0B0A0B        rm_mode12_dfseg	db	11, 11, 10, 10, 11, 11, 10, 11
  3819                                  
  3820                                  ; Opcode decode tables
  3821                                  
  3822 000016C8 090909090707191A09-     xlat_ids	db	9, 9, 9, 9, 7, 7, 25, 26, 9, 9, 9, 9, 7, 7, 25, 48, 9, 9, 9, 9, 7, 7, 25, 26, 9, 9, 9, 9, 7, 7, 25, 26, 9, 9, 9, 9, 7, 7, 27, 28, 9, 9, 9, 9, 7, 7, 27, 28, 9, 9, 9, 9, 7, 7, 27, 29, 9, 9, 9, 9, 7, 7, 27, 29, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 51, 54, 52, 52, 52, 52, 52, 52, 55, 55, 55, 55, 52, 52, 52, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 15, 15, 24, 24, 9, 9, 9, 9, 10, 10, 10, 10, 16, 16, 16, 16, 16, 16, 16, 16, 30, 31, 32, 53, 33, 34, 35, 36, 11, 11, 11, 11, 17, 17, 18, 18, 47, 47, 17, 17, 17, 17, 18, 18, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 12, 19, 19, 37, 37, 20, 20, 49, 50, 19, 19, 38, 39, 40, 19, 12, 12, 12, 12, 41, 42, 43, 44, 53, 53, 53, 53, 53, 53, 53, 53, 13, 13, 13, 13, 21, 21, 22, 22, 14, 14, 14, 14, 21, 21, 22, 22, 53, 0, 23, 23, 53, 45, 6, 6, 46, 46, 46, 46, 46, 46, 5, 5
  3822 000016D1 090909070719300909-
  3822 000016DA 09090707191A090909-
  3822 000016E3 090707191A09090909-
  3822 000016EC 07071B1C0909090907-
  3822 000016F5 071B1C090909090707-
  3822 000016FE 1B1D0909090907071B-
  3822 00001707 1D0202020202020202-
  3822 00001710 020202020202020203-
  3822 00001719 030303030303030404-
  3822 00001722 040404040404333634-
  3822 0000172B 343434343437373737-
  3822 00001734 343434340000000000-
  3822 0000173D 000000000000000000-
  3822 00001746 0000080808080F0F18-
  3822 0000174F 18090909090A0A0A0A-
  3822 00001758 10101010101010101E-
  3822 00001761 1F2035212223240B0B-
  3822 0000176A 0B0B111112122F2F11-
  3822 00001773 111111121201010101-
  3822 0000177C 010101010101010101-
  3822 00001785 0101010C0C13132525-
  3822 0000178E 141431321313262728-
  3822 00001797 130C0C0C0C292A2B2C-
  3822 000017A0 35353535353535350D-
  3822 000017A9 0D0D0D151516160E0E-
  3822 000017B2 0E0E15151616350017-
  3822 000017BB 17352D06062E2E2E2E-
  3822 000017C4 2E2E0505           
  3823 000017C8 000000000000080801-     ex_data  	db	0, 0, 0, 0, 0, 0, 8, 8, 1, 1, 1, 1, 1, 1, 9, 36, 2, 2, 2, 2, 2, 2, 10, 10, 3, 3, 3, 3, 3, 3, 11, 11, 4, 4, 4, 4, 4, 4, 8, 0, 5, 5, 5, 5, 5, 5, 9, 1, 6, 6, 6, 6, 6, 6, 10, 2, 7, 7, 7, 7, 7, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 21, 21, 21, 21, 21, 0, 0, 0, 0, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 16, 22, 0, 0, 0, 0, 1, 1, 0, 255, 48, 2, 0, 0, 0, 0, 255, 255, 40, 11, 3, 3, 3, 3, 3, 3, 3, 3, 43, 43, 43, 43, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 21, 0, 0, 2, 40, 21, 21, 80, 81, 92, 93, 94, 95, 0, 0
  3823 000017D1 010101010109240202-
  3823 000017DA 020202020A0A030303-
  3823 000017E3 0303030B0B04040404-
  3823 000017EC 040408000505050505-
  3823 000017F5 050901060606060606-
  3823 000017FE 0A020707070707070B-
  3823 00001807 000000000000000000-
  3823 00001810 010101010101010100-
  3823 00001819 000000000000000000-
  3823 00001822 000000000000000015-
  3823 0000182B 151515151500000000-
  3823 00001834 151515151515151515-
  3823 0000183D 151515151515151515-
  3823 00001846 151500000000000000-
  3823 0000184F 00080808080C0C0C0C-
  3823 00001858 000000000000000000-
  3823 00001861 0000000000FF000000-
  3823 0000186A 000000000000000001-
  3823 00001873 010202010100000000-
  3823 0000187C 000000000000000000-
  3823 00001885 000000010100001016-
  3823 0000188E 00000000010100FF30-
  3823 00001897 0200000000FFFF280B-
  3823 000018A0 03030303030303032B-
  3823 000018A9 2B2B2B000000000000-
  3823 000018B2 000001010101011500-
  3823 000018BB 000228151550515C5D-
  3823 000018C4 5E5F0000           
  3824 000018C8 030303030303000005-     std_flags	db	3, 3, 3, 3, 3, 3, 0, 0, 5, 5, 5, 5, 5, 5, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 5, 5, 5, 5, 5, 5, 0, 1, 3, 3, 3, 3, 3, 3, 0, 1, 5, 5, 5, 5, 5, 5, 0, 1, 3, 3, 3, 3, 3, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3824 000018D1 050505050500000101-
  3824 000018DA 010101010000010101-
  3824 000018E3 010101000005050505-
  3824 000018EC 050500010303030303-
  3824 000018F5 030001050505050505-
  3824 000018FE 000103030303030300-
  3824 00001907 010101010101010101-
  3824 00001910 010101010101010100-
  3824 00001919 000000000000000000-
  3824 00001922 000000000000000000-
  3824 0000192B 000000000000000000-
  3824 00001934 000000000000000000-
  3824 0000193D 000000000000000000-
  3824 00001946 000001010101050500-
  3824 0000194F 000000000000000000-
  3824 00001958 000000000000000000-
  3824 00001961 000000000000000000-
  3824 0000196A 000000000000050500-
  3824 00001973 000000000000000000-
  3824 0000197C 000000000000000000-
  3824 00001985 000000000000000000-
  3824 0000198E 000000000000000000-
  3824 00001997 000000000005050000-
  3824 000019A0 000000000000000000-
  3824 000019A9 000000000000000000-
  3824 000019B2 000000000000000000-
  3824 000019BB 000000000000000000-
  3824 000019C4 00000000           
  3825 000019C8 020202020101010102-     base_size	db	2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 0, 0, 2, 2, 2, 2, 4, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2
  3825 000019D1 020202010101020202-
  3825 000019DA 020201010101020202-
  3825 000019E3 020101010102020202-
  3825 000019EC 010101010202020201-
  3825 000019F5 010101020202020101-
  3825 000019FE 010102020202010101-
  3825 00001A07 010101010101010101-
  3825 00001A10 010101010101010101-
  3825 00001A19 010101010101010101-
  3825 00001A22 010101010101010101-
  3825 00001A2B 010101010101010101-
  3825 00001A34 010101010202020202-
  3825 00001A3D 020202020202020202-
  3825 00001A46 020202020202020202-
  3825 00001A4F 020202020202020202-
  3825 00001A58 010101010101010101-
  3825 00001A61 010001010101010303-
  3825 00001A6A 030301010101010101-
  3825 00001A73 010101010101010101-
  3825 00001A7C 010101010101010101-
  3825 00001A85 010101030300000202-
  3825 00001A8E 020204010000000000-
  3825 00001A97 000202020202020101-
  3825 00001AA0 020202020202020202-
  3825 00001AA9 020202020202020000-
  3825 00001AB2 000001010101010201-
  3825 00001ABB 010101020201010101-
  3825 00001AC4 01010202           
  3826 00001AC8 000000000101000000-     i_w_adder	db	0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3826 00001AD1 000000010100000000-
  3826 00001ADA 000001010000000000-
  3826 00001AE3 000101000000000000-
  3826 00001AEC 010100000000000001-
  3826 00001AF5 010000000000000101-
  3826 00001AFE 000000000000010100-
  3826 00001B07 000000000000000000-
  3826 00001B10 000000000000000000-
  3826 00001B19 000000000000000000-
  3826 00001B22 000000000000000000-
  3826 00001B2B 000000000001010101-
  3826 00001B34 000000000000000000-
  3826 00001B3D 000000000000000000-
  3826 00001B46 000001010101000000-
  3826 00001B4F 000000000000000000-
  3826 00001B58 000000000000000000-
  3826 00001B61 000000000000000000-
  3826 00001B6A 000000000000010100-
  3826 00001B73 000000000001010101-
  3826 00001B7C 010101010101010101-
  3826 00001B85 010101000000000000-
  3826 00001B8E 010100000000000000-
  3826 00001B97 000000000000000000-
  3826 00001BA0 000000000000000000-
  3826 00001BA9 000000000000000000-
  3826 00001BB2 000000000000000000-
  3826 00001BBB 000000000000000000-
  3826 00001BC4 00000000           
  3827 00001BC8 010101010000000001-     i_mod_adder	db	1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1
  3827 00001BD1 010101000000000101-
  3827 00001BDA 010100000000010101-
  3827 00001BE3 010000000001010101-
  3827 00001BEC 000000000101010100-
  3827 00001BF5 000000010101010000-
  3827 00001BFE 000001010101000000-
  3827 00001C07 000000000000000000-
  3827 00001C10 000000000000000000-
  3827 00001C19 000000000000000000-
  3827 00001C22 000000000000000000-
  3827 00001C2B 000000000000000000-
  3827 00001C34 000000000000000000-
  3827 00001C3D 000000000000000000-
  3827 00001C46 000001010101010101-
  3827 00001C4F 010101010101010101-
  3827 00001C58 000000000000000000-
  3827 00001C61 000000000000000000-
  3827 00001C6A 000000000000000000-
  3827 00001C73 000000000000000000-
  3827 00001C7C 000000000000000000-
  3827 00001C85 000000010100000101-
  3827 00001C8E 010100000000000000-
  3827 00001C97 000101010100000000-
  3827 00001CA0 010101010101010100-
  3827 00001CA9 000000000000000000-
  3827 00001CB2 000000000000000000-
  3827 00001CBB 000000010100000000-
  3827 00001CC4 00000101           
  3828                                  
  3829 00001CC8 000204060708090A0B      flags_mult	db	0, 2, 4, 6, 7, 8, 9, 10, 11
  3830                                  
  3831 00001CD1 30282B282C293131        jxx_dec_a	db	48, 40, 43, 40, 44, 41, 49, 49
  3832 00001CD9 3131312B3131312B        jxx_dec_b	db	49, 49, 49, 43, 49, 49, 49, 43
  3833 00001CE1 3131313131312C2C        jxx_dec_c	db	49, 49, 49, 49, 49, 49, 44, 44
  3834 00001CE9 3131313131313030        jxx_dec_d	db	49, 49, 49, 49, 49, 49, 48, 48
  3835                                  
  3836 00001CF1 010000010001010000-     parity		db	1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1
  3836 00001CFA 010100010000010001-
  3836 00001D03 010001000001010000-
  3836 00001D0C 010001010000010100-
  3836 00001D15 010000010100000100-
  3836 00001D1E 010100010000010001-
  3836 00001D27 010000010100010000-
  3836 00001D30 010001010001000001-
  3836 00001D39 010000010001010001-
  3836 00001D42 000001000101000001-
  3836 00001D4B 010001000001010000-
  3836 00001D54 010001010000010100-
  3836 00001D5D 010000010001010001-
  3836 00001D66 000001010000010001-
  3836 00001D6F 010000010100010000-
  3836 00001D78 010100000100010100-
  3836 00001D81 010000010001010000-
  3836 00001D8A 010100010000010100-
  3836 00001D93 000100010100000101-
  3836 00001D9C 000100000100010100-
  3836 00001DA5 010000010100000100-
  3836 00001DAE 010100010000010001-
  3836 00001DB7 010000010100010000-
  3836 00001DC0 010001010001000001-
  3836 00001DC9 010000010001010000-
  3836 00001DD2 010100010000010100-
  3836 00001DDB 000100010100010000-
  3836 00001DE4 010001010000010100-
  3836 00001DED 01000001           
  3837                                  
  3838                                  ; This is the format of the 36-byte tm structure, returned by the emulator's RTC query call
  3839                                  
  3840                                  timetable:
  3841                                  
  3842                                  tm_sec		equ $
  3843                                  tm_min		equ $+4
  3844                                  tm_hour		equ $+8
  3845                                  tm_mday		equ $+12
  3846                                  tm_mon		equ $+16
  3847                                  tm_year		equ $+20
  3848                                  tm_wday		equ $+24
  3849                                  tm_yday		equ $+28
  3850                                  tm_dst		equ $+32
  3851                                  tm_msec		equ $+36
